{
	"swagger": "2.0",
	"basePath": "/api/scheduler/1",
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"schemes": [
		"https"
	],
	"info": {
		"title": "Paul's Scheduler Service Spec",
		"description": "Paul's Scheduler Service Spec (specification scratch-pad)",
		"version": "1"
	},
	"paths": {
		"/jobs": {
			"post": {
				"summary": "Schedule a reminder job",
				"description": "Schedule a reminder job",
				"operationId": "postJob",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/JobInput"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/Job"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				},
				"tags": [
					"Jobs"
				]
			},
			"delete": {
				"summary": "Delete all jobs for an organization",
				"description": "Delete all jobs for an organization",
				"operationId": "deleteJobs",
				"parameters": [
				],
				"responses": {
					"202": {
						"description": "Accepted"
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				},
				"tags": [
					"Jobs"
				]
			}
		}
	},
	"definitions": {
		"Job": {
			"description": "A scheduled reminder job",
			"properties": {
				"id": {
					"description": "Job identifier",
					"type": "string"
				},
				"jobType": {
					"description": "Payload schema identification",
					"type": "string"
				},
				"jobName": {
					"description": "A correlation identifier for this job",
					"type": "string"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"startTime": {
							"type": "string",
							"format": "date-time"
						},
						"endTime": {
							"type": "string",
							"format": "date-time"
						},
						"cron": {
							"type": "string"
						},
						"timezone": {
							"type": "string"
						}
					},
					"required": [
						"startTime"
					]
				},
				"vectors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Vector"
					}
				},
				"payload": {
					"description": "The string (generally Base64 encoded JSON) payload of the reminder",
					"type": "string"
				}
			},
			"required": [
				"id",
				"jobType",
				"trigger",
				"payload"
			]
		},
		"JobInput": {
			"description": "Schedule a reminder job",
			"properties": {
				"jobType": {
					"description": "Payload schema identification",
					"type": "string"
				},
				"jobName": {
					"description": "A correlation identifier for this job",
					"type": "string"
				},
				"trigger": {
					"type": "object",
					"properties": {
						"startTime": {
							"type": "string",
							"format": "date-time"
						},
						"endTime": {
							"type": "string",
							"format": "date-time"
						},
						"cron": {
							"type": "string"
						},
						"timezone": {
							"type": "string"
						}
					},
					"required": [
						"startTime"
					]
				},
				"vectors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Vector"
					}
				},
				"payload": {
					"description": "The string (generally Base64 encoded JSON) payload of the reminder",
					"type": "string"
				}
			},
			"required": [
				"jobType",
				"trigger",
				"payload"
			]
		},
		"Vector": {
			"description": "Defines how a reminder is sent",
			"properties": {
				"vectorType": {
					"type": "string",
					"enum": [
						"KAFKA",
						"WEBHOOK"
					]
				}
			},
			"required": [
				"vectorType"
			]
		},
		"KafkaVector": {
			"allOf": [
				{
					"$ref": "#/definitions/Vector"
				},
				{
					"properties": {
						"vectorType": {
							"type": "string",
							"enum": [
								"KAFKA"
							]
						},
						"topic": {
							"type": "string",
							"default": "reminders"
						}
					},
					"required": [
						"vectorType"
					]
				}
			]
		},
		"WebhookVector": {
			"allOf": [
				{
					"$ref": "#/definitions/Vector"
				},
				{
					"properties": {
						"vectorType": {
							"type": "string",
							"enum": [
								"WEBHOOK"
							]
						},
						"uri": {
							"type": "string"
						}
					},
					"required": [
						"vectorType",
						"uri"
					]
				}
			]
		},
		"BadRequestResponse": {
			"properties": {
				"code": {
					"description": "HTTP status code",
					"format": "int32",
					"type": "integer",
					"enum": [
						400
					]
				},
				"subcode": {
					"description": "An application-specific response sub-status",
					"type": "string"
				},
				"message": {
					"description": "A detailed description of the response or error",
					"type": "string"
				},
				"reason": {
					"description": "A description of the response code",
					"enum": [
						"Bad Request"
					],
					"type": "string"
				}
			},
			"required": [
				"code",
				"subcode",
				"reason",
				"message"
			]
		},
		"UnauthorizedResponse": {
			"properties": {
				"code": {
					"description": "HTTP status code",
					"format": "int32",
					"type": "integer",
					"enum": [
						401
					]
				},
				"subcode": {
					"description": "An application-specific response sub-status",
					"type": "string"
				},
				"message": {
					"description": "A detailed description of the response or error",
					"type": "string"
				},
				"reason": {
					"description": "A description of the response code",
					"enum": [
						"Unauthorized"
					],
					"type": "string"
				}
			},
			"required": [
				"code",
				"subcode",
				"reason",
				"message"
			]
		},
		"ForbiddenResponse": {
			"properties": {
				"code": {
					"description": "HTTP status code",
					"format": "int32",
					"type": "integer",
					"enum": [
						403
					]
				},
				"subcode": {
					"description": "An application-specific response sub-status",
					"type": "string"
				},
				"message": {
					"description": "A detailed description of the response or error",
					"type": "string"
				},
				"reason": {
					"description": "A description of the response code",
					"enum": [
						"Forbidden"
					],
					"type": "string"
				}
			},
			"required": [
				"code",
				"subcode",
				"reason",
				"message"
			]
		},
		"NotFoundResponse": {
			"properties": {
				"code": {
					"description": "HTTP status code",
					"format": "int32",
					"type": "integer",
					"enum": [
						404
					]
				},
				"subcode": {
					"description": "An application-specific response sub-status",
					"type": "string"
				},
				"message": {
					"description": "A detailed description of the response or error",
					"type": "string"
				},
				"reason": {
					"description": "A description of the response code",
					"enum": [
						"Not Found"
					],
					"type": "string"
				}
			},
			"required": [
				"code",
				"subcode",
				"reason",
				"message"
			]
		},
		"ConflictResponse": {
			"properties": {
				"code": {
					"description": "HTTP status code",
					"format": "int32",
					"type": "integer",
					"enum": [
						409
					]
				},
				"subcode": {
					"description": "An application-specific response sub-status",
					"type": "string"
				},
				"message": {
					"description": "A detailed description of the response or error",
					"type": "string"
				},
				"reason": {
					"description": "A description of the response status",
					"enum": [
						"Conflict"
					],
					"type": "string"
				}
			},
			"required": [
				"code",
				"subcode",
				"reason",
				"message"
			]
		}
	},
	"parameters": {
		"query-after": {
			"description": "After this time or sequenced item identifier (exclusive)",
			"in": "query",
			"name": "after",
			"required": false,
			"type": "string"
		},
		"query-before": {
			"description": "Before this time or sequenced item identifier (exclusive)",
			"in": "query",
			"name": "before",
			"required": false,
			"type": "string"
		},
		"query-from": {
			"description": "After this time or sequenced item identifier (inclusive)",
			"in": "query",
			"name": "from",
			"required": false,
			"type": "string"
		},
		"query-limit": {
			"default": 100,
			"description": "Maximum result size to return",
			"in": "query",
			"maximum": 1000,
			"name": "limit",
			"required": false,
			"type": "integer"
		},
		"query-offset": {
			"default": 0,
			"description": "Skip this many results before returning the result set",
			"in": "query",
			"name": "offset",
			"required": false,
			"type": "integer"
		},
		"query-to": {
			"description": "Before this time or sequenced item identifier (inclusive)",
			"in": "query",
			"name": "to",
			"required": false,
			"type": "string"
		}
	},
	"responses": {
		"204": {
			"description": "No Content"
		},
		"400": {
			"description": "Bad Request - The request is malformed",
			"schema": {
				"$ref": "#/definitions/BadRequestResponse"
			}
		},
		"401": {
			"description": "Unauthorized - The caller cannot be identified",
			"schema": {
				"$ref": "#/definitions/UnauthorizedResponse"
			}
		},
		"403": {
			"description": "Forbidden - The authenticated user does not have permission to perform this action",
			"schema": {
				"$ref": "#/definitions/ForbiddenResponse"
			}
		},
		"404": {
			"description": "Not Found - The requested resource does not exist",
			"schema": {
				"$ref": "#/definitions/NotFoundResponse"
			}
		},
		"409": {
			"description": "Conflict - The action cannot be performed in the system",
			"schema": {
				"$ref": "#/definitions/ConflictResponse"
			}
		}
	}
}