{
	"openapi": "3.0.0",
	"servers": [
		{
			"url": "/api/xm/1"
		}
	],
	"info": {
		"title": "Paul's xM API Spec",
		"description": "Paul's xM API Spec (specification scratch-pad)",
		"version": "1"
	},
	"paths": {
		"/agents": {
			"get": {
				"summary": "Returns information about agents",
				"description": "Returns information about agents",
				"operationId": "getAgents",
				"parameters": [
					{
						"description": "ACTIVE or INACTIVE",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Agent_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"post": {
				"summary": "Update an agent",
				"description": "Update an agent",
				"operationId": "postAgent",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Agent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AgentInput"
							}
						}
					},
					"description": "Agent update data",
					"required": true
				}
			}
		},
		"/agents/{agentId}": {
			"delete": {
				"summary": "Delete an agent",
				"description": "Delete an agent",
				"operationId": "deleteAgent",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Agent"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"get": {
				"summary": "Returns information about an agent",
				"description": "Returns information about an agent",
				"operationId": "getAgent",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Agent"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/agents/{agentId}/integrations": {
			"get": {
				"summary": "Get integrations that can be executed on this agent",
				"description": "Get integrations that can be executed on this agent",
				"operationId": "getAgentIntegrations",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Integration_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/agents/{agentId}/monitors": {
			"get": {
				"summary": "Return agent monitors",
				"description": "Return agent monitors",
				"operationId": "getAgentMonitors",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_AgentMonitor_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"post": {
				"summary": "Add or update an agent monitor",
				"description": "Add or update an agent monitor",
				"operationId": "postAgentMonitor",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentMonitor"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentMonitor"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AgentMonitorInput"
							}
						}
					},
					"description": "Agent Monitor",
					"required": true
				}
			},
			"put": {
				"summary": "Replace agent monitors",
				"description": "Replace agent monitors",
				"operationId": "putAgentMonitors",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_AgentMonitor_"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "An array containing the agent monitors",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/AgentMonitorInput"
								}
							}
						}
					},
					"description": "An array containing the agent monitors",
					"required": true
				}
			}
		},
		"/agents/{agentId}/monitors/{monitorId}": {
			"delete": {
				"summary": "Delete an agent monitor",
				"description": "Delete an agent monitor",
				"operationId": "deleteAgentMonitor",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/path-monitorId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentMonitor"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/agents/{agentId}/owners": {
			"get": {
				"summary": "Return agent owners",
				"description": "Return agent owners",
				"operationId": "getAgentOwners",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_AgentOwner_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"post": {
				"summary": "Add an agent owner",
				"description": "Add an agent owner",
				"operationId": "postAgentOwner",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentOwner"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentOwner"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AgentOwnerInput"
							}
						}
					},
					"description": "Owner",
					"required": true
				}
			}
		},
		"/agents/{agentId}/owners/{personId}": {
			"delete": {
				"summary": "Delete an agent owner",
				"description": "Delete an agent owner",
				"operationId": "deleteAgentOwner",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					},
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentOwner"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/agent-installers/{versionId}": {
			"get": {
				"summary": "Returns information about agent install packages",
				"description": "Returns information about agent install packages",
				"operationId": "getAgentInstaller",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-versionId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AgentInstaller"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/audits": {
			"get": {
				"summary": "Audit records",
				"description": "Audit records",
				"operationId": "getAudits",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-from"
					},
					{
						"$ref": "#/components/parameters/query-to"
					},
					{
						"$ref": "#/components/parameters/query-after"
					},
					{
						"$ref": "#/components/parameters/query-before"
					},
					{
						"$ref": "#/components/parameters/query-eventId"
					},
					{
						"$ref": "#/components/parameters/query-personId"
					},
					{
						"$ref": "#/components/parameters/query-deviceId"
					},
					{
						"$ref": "#/components/parameters/query-auditType"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Audit_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Audit"
				]
			}
		},
		"/built-in-plans": {
			"post": {
				"summary": "Create or update a built-in communication plan",
				"description": "Create or update a built-in communication plan",
				"operationId": "postBuiltInPlan",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BuiltInPlanInput"
							}
						}
					},
					"description": "Built-in plan",
					"required": true
				}
			}
		},
		"/conferences": {
			"get": {
				"summary": "Get conferences",
				"description": "Returns information about conferences",
				"operationId": "getConferences",
				"parameters": [
					{
						"description": "Filter by associated events",
						"in": "query",
						"name": "eventId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"INACTIVE",
								"WAITING",
								"ACTIVE"
							]
						}
					},
					{
						"description": "Filter by case insensitive substring match within name",
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by case insensitive substring match within description",
						"in": "query",
						"name": "description",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by case insensitive substring match within bridge number",
						"in": "query",
						"name": "bridgeId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by case insensitive substring match within host",
						"in": "query",
						"name": "host",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Sort results by",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"STATUS",
								"NAME",
								"HOST",
								"START_TIME"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-sortOrder"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-include"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Conference_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Conferences"
				]
			}
		},
		"/conferences/{conferenceId}": {
			"get": {
				"summary": "Returns information about a conference",
				"description": "Returns information about a conference",
				"operationId": "getConference",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-conferenceId"
					},
					{
						"$ref": "#/components/parameters/query-include"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Conference"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Conferences"
				]
			}
		},
		"/conferences/{conferenceId}/participants": {
			"get": {
				"summary": "Get conference participants",
				"description": "Returns information about conference participants",
				"operationId": "getConferenceParticipants",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-conferenceId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-include"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ConferenceParticipant_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Conferences"
				]
			},
			"post": {
				"summary": "Add a conference participant",
				"description": "Add a conference participant",
				"operationId": "postConferenceParticipant",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-conferenceId"
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConferenceParticipant"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConferenceParticipant"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Conferences"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConferenceParticipantInput"
							}
						}
					},
					"description": "A new conference participant",
					"required": true
				}
			}
		},
		"/countries": {
			"get": {
				"description": "List of countries",
				"operationId": "getCountries",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-used"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Country_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List of countries",
				"tags": [
					"Countries"
				]
			}
		},
		"/deep-links": {
			"get": {
				"summary": "Returns information about deep links",
				"description": "Returns information about deep links",
				"operationId": "getDeepLinks",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-personId"
					},
					{
						"description": "Deep link code",
						"in": "query",
						"name": "code",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_DeepLink_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Deep Links"
				]
			},
			"post": {
				"description": "Generate a single use, expiring, link with associated action and meta data",
				"operationId": "postDeepLink",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeepLink"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeepLink"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Create or update a deep link",
				"tags": [
					"Deep Links"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeepLinkInput"
							}
						}
					},
					"description": "An object that contains the definition of the new link",
					"required": true
				}
			}
		},
		"/deep-links/{deepLinkToken}": {
			"get": {
				"description": "Returns information about a deep link",
				"operationId": "getDeepLink",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-deepLinkToken"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeepLink"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a deep link",
				"tags": [
					"Deep Links"
				]
			}
		},
		"/device-names": {
			"get": {
				"description": "Returns information about device names",
				"operationId": "getDeviceNames",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-deviceType"
					},
					{
						"$ref": "#/components/parameters/query-deviceName"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_DeviceName_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about device names",
				"tags": [
					"Device Names"
				]
			}
		},
		"/device-types": {
			"get": {
				"description": "Returns device types",
				"operationId": "getDeviceTypes",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_DeviceType_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns device types",
				"tags": [
					"Device Types"
				]
			}
		},
		"/devices": {
			"get": {
				"summary": "Returns information about devices",
				"description": "Returns information about devices",
				"operationId": "getDevices",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-deviceType"
					},
					{
						"$ref": "#/components/parameters/query-phoneNumberFormat"
					},
					{
						"description": "Recipient status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE",
								"INVALID"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Device_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Devices"
				]
			},
			"post": {
				"description": "Add a device",
				"operationId": "postDevice",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Add a device",
				"tags": [
					"Devices"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeviceInput"
							}
						}
					},
					"description": "An object that contains the definition of the new device",
					"required": true
				}
			}
		},
		"/devices/{deviceId}": {
			"get": {
				"description": "Returns information about a device. Use embed=timeframes to include device timeframes in the response",
				"operationId": "getDevice",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-deviceId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					},
					{
						"$ref": "#/components/parameters/query-phoneNumberFormat"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a device",
				"tags": [
					"Devices"
				]
			},
			"delete": {
				"description": "Deletes a device and removes it from the owner's device list",
				"operationId": "deleteDevice",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-deviceId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Deletes a device",
				"tags": [
					"Devices"
				]
			}
		},
		"/events": {
			"get": {
				"summary": "Get Events",
				"description": "Returns a list of event resources in the xMatters system",
				"operationId": "getEvents",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-planId"
					},
					{
						"$ref": "#/components/parameters/query-formId"
					},
					{
						"$ref": "#/components/parameters/query-integrationId"
					},
					{
						"$ref": "#/components/parameters/query-submitterId"
					},
					{
						"$ref": "#/components/parameters/query-propertyName"
					},
					{
						"$ref": "#/components/parameters/query-propertyValue"
					},
					{
						"$ref": "#/components/parameters/query-requestId"
					},
					{
						"description": "Filter by associated conferences",
						"in": "query",
						"name": "conferenceId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Event status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"SUSPENDED",
								"TERMINATED"
							]
						}
					},
					{
						"description": "Sort results by",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"STATUS",
								"EVENT_ID",
								"SUBMITTER",
								"START_TIME"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-sortOrder"
					},
					{
						"$ref": "#/components/parameters/query-from"
					},
					{
						"$ref": "#/components/parameters/query-to"
					},
					{
						"$ref": "#/components/parameters/query-before"
					},
					{
						"$ref": "#/components/parameters/query-after"
					},
					{
						"$ref": "#/components/parameters/query-at"
					},
					{
						"description": "Domain entities to embed in the response (e.g. form,integration,recipients,responseOptions,submitter,annotations)",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Event_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Events"
				]
			},
			"post": {
				"summary": "Submit or update an event",
				"description": "Submit or update an event",
				"operationId": "postEvent",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						}
					},
					"202": {
						"description": "Accepted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Events"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/EventInput"
				}
			}
		},
		"/events/{eventId}": {
			"get": {
				"description": "Returns information about an event. Use embed=conference,recipients to include conference and resolved recipients in the response",
				"operationId": "getEvent",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"$ref": "#/components/parameters/query-at"
					},
					{
						"description": "Domain entities to embed in the response (e.g. form,integration,recipients,responseOptions,submitter,annotations)",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about an event",
				"tags": [
					"Events"
				]
			}
		},
		"/events/{eventId}/recipients": {
			"get": {
				"description": "Returns information about event recipients",
				"operationId": "getEventRecipients",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"description": "Case insensitive substring match within firstName, lastName, id, targetName, webLogin, email, phoneNumber. Search terms may be separated by spaces, results are returned that match ANY of the search terms",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "searchType",
						"in": "query",
						"name": "searchType",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CONTAINS",
								"STARTS_WITH",
								"ENDS_WITH",
								"EQUALS"
							]
						}
					},
					{
						"description": "recipientType",
						"in": "query",
						"name": "recipientType",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"PERSON",
								"DEVICE",
								"GROUP"
							]
						}
					},
					{
						"description": "targeted",
						"in": "query",
						"name": "targeted",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "deliveryStatus",
						"in": "query",
						"name": "deliveryStatus",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"PENDING",
								"DELIVERED",
								"RESPONDED",
								"FAILED"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Recipient_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about event recipients",
				"tags": [
					"Events"
				]
			}
		},
		"/events/{eventId}/annotations": {
			"get": {
				"summary": "Get event annotations",
				"description": "Get event annotations",
				"operationId": "getEventAnnotations",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_EventAnnotation_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Events"
				]
			},
			"post": {
				"summary": "Add an event annotation",
				"description": "Add an event annotation",
				"operationId": "postEventAnnotation",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventAnnotation"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventAnnotation"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Events"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventAnnotationInput"
							}
						}
					},
					"description": "An event annotation",
					"required": true
				}
			}
		},
		"/events/{eventId}/annotations/{annotationId}": {
			"delete": {
				"summary": "Remove an event annotation",
				"description": "Remove an event annotation",
				"operationId": "deleteEventAnnotation",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"$ref": "#/components/parameters/path-annotationId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventAnnotation"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Events"
				]
			},
			"get": {
				"summary": "Get an event annotation",
				"description": "Get an event annotation",
				"operationId": "getEventAnnotation",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"$ref": "#/components/parameters/path-annotationId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventAnnotation"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Events"
				]
			}
		},
		"/events/{eventId}/file-attachments": {
			"get": {
				"summary": "Get file attachments",
				"description": "Get file attachments",
				"operationId": "getEventFileAttachments",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_FileAttachment_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Events"
				]
			},
			"post": {
				"summary": "Upload a file attachment",
				"description": "Upload a file attachment",
				"operationId": "postEventFileAttachment",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-eventId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileAttachment"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Events"
				],
				"requestBody": {
					"content": {
						"application/octet-stream": {
							"schema": {
								"type": "string",
								"format": "binary"
							}
						}
					},
					"required": true
				}
			}
		},
		"/feature-toggles": {
			"get": {
				"tags": [
					"Feature Toggles"
				],
				"summary": "Get feature toggles",
				"description": "Get feature toggles",
				"operationId": "getFeatureToggles",
				"parameters": [
					{
						"name": "name",
						"in": "query",
						"description": "The toggle name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_FeatureToggle_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				}
			}
		},
		"/groups": {
			"get": {
				"description": "List Groups. Can embed group calendar e.g. embed=calendar(at: '2015-11-02T22:54:19Z') e.g. embed=calendar(from: '2015-11-02T22:54:19Z', to: '2015-11-03T22:54:19Z')",
				"operationId": "getGroups",
				"parameters": [
					{
						"description": "Case insensitive substring match within name, description. Search terms may be separated by spaces, results are returned that match ALL if the search terms of the operand is set to AND, or ANY of the search terms if the operand is set to OR",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Group supervisors include this person. UUID or targetName",
						"in": "query",
						"name": "supervisor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Operand to use in search",
						"in": "query",
						"name": "operand",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"OR",
								"AND"
							],
							"default": "OR"
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Group_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List Groups",
				"tags": [
					"Groups"
				]
			},
			"post": {
				"description": "Creates a group",
				"operationId": "postGroup",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Creates a group",
				"tags": [
					"Groups"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/GroupInput"
							}
						}
					},
					"description": "An object that contains a description of the new group",
					"required": true
				}
			}
		},
		"/groups/{groupId}": {
			"delete": {
				"description": "Deletes a Group",
				"operationId": "deleteGroup",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"summary": "Deletes a Group",
				"tags": [
					"Groups"
				]
			},
			"get": {
				"description": "Returns information about a Group",
				"operationId": "getGroup",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Group"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a Group",
				"tags": [
					"Groups"
				]
			}
		},
		"/groups/{groupId}/calendar": {
			"get": {
				"description": "Shift occurrence calendar",
				"operationId": "getGroupCalendar",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/query-from"
					},
					{
						"$ref": "#/components/parameters/query-to"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ShiftOccurrence_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Shift occurrence calendar",
				"tags": [
					"Group Calendar"
				]
			}
		},
		"/groups/{groupId}/members": {
			"get": {
				"description": "List Group members",
				"operationId": "getGroupMembers",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_GroupMember_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List Group members",
				"tags": [
					"Group Members"
				]
			},
			"post": {
				"description": "Add Group members",
				"operationId": "postGroupMember",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GroupMember"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Add Group members",
				"tags": [
					"Group Members"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RecipientPointer"
							}
						}
					},
					"description": "Member to add",
					"required": true
				}
			}
		},
		"/groups/{groupId}/members/{memberId}": {
			"delete": {
				"description": "Removes a Group Member",
				"operationId": "deleteGroupMember",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-memberId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GroupMember"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/403"
					}
				},
				"summary": "Removes a Group Member",
				"tags": [
					"Group Members"
				]
			}
		},
		"/groups/{groupId}/roster": {
			"get": {
				"description": "List group roster. This is the same as group members with the notable exception that devices that are direct members of groups are not returned as such. They are instead returned in the devices of their owner (Person)",
				"operationId": "getGroupRoster",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_RosterMember_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List group roster",
				"tags": [
					"Group Members"
				]
			}
		},
		"/groups/{groupId}/shifts": {
			"get": {
				"description": "List shifts",
				"operationId": "getShifts",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"description": "Filter by status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Shift_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List shifts",
				"tags": [
					"Shifts"
				]
			},
			"post": {
				"description": "Add or update a shift",
				"operationId": "postShift",
				"parameters": [
					{
						"description": "The group uuid or targetName",
						"in": "path",
						"name": "groupId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Shift"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Add or update a shift",
				"tags": [
					"Shifts"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ShiftInput"
							}
						}
					},
					"required": true
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}": {
			"get": {
				"description": "Returns information about a Shift",
				"operationId": "getShift",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-shiftId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Shift"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a Shift",
				"tags": [
					"Shifts"
				]
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/members": {
			"get": {
				"description": "List Shift members",
				"operationId": "getShiftMembers",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-shiftId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ShiftMember_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List Shift members",
				"tags": [
					"Shift Members"
				]
			},
			"post": {
				"description": "Add or update a shift membership",
				"operationId": "postShiftMember",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-shiftId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ShiftMember"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Add or update a shift membership",
				"tags": [
					"Shift Members"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ShiftMemberInput"
							}
						}
					},
					"description": "Shift Member",
					"required": true
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/occurrences/{occurrenceId}": {
			"get": {
				"summary": "List shift occurrences",
				"description": "List shift occurrences",
				"operationId": "getShiftOccurrences",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-shiftId"
					},
					{
						"$ref": "#/components/parameters/path-occurrenceId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ShiftOccurrence_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Shift Occurrences"
				]
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/occurrences/{occurrenceId}/members": {
			"get": {
				"summary": "List shift occurrence members",
				"description": "List shift occurrence members",
				"operationId": "getShiftOccurrenceMembers",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/path-shiftId"
					},
					{
						"$ref": "#/components/parameters/path-occurrenceId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ShiftOccurrenceMember_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Shift Occurrences"
				]
			}
		},
		"/groups/{groupId}/supervisors": {
			"get": {
				"summary": "List Group supervisors",
				"description": "List Group supervisors",
				"operationId": "getGroupSupervisors",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-groupId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Person_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Group Supervisors"
				]
			}
		},
		"/integration-agents": {
			"get": {
				"summary": "Returns information about agents",
				"description": "Returns information about agents",
				"operationId": "getIntegrationAgents",
				"parameters": [
					{
						"description": "ACTIVE or INACTIVE",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_IntegrationAgent_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"post": {
				"summary": "Update an agent",
				"description": "Update an agent",
				"operationId": "postIntegrationAgent",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrationAgent"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IntegrationAgentInput"
							}
						}
					},
					"description": "Agent update data",
					"required": true
				}
			}
		},
		"/integration-agents/{agentId}": {
			"delete": {
				"summary": "Delete an agent",
				"description": "Delete an agent",
				"operationId": "deleteIntegrationAgent",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrationAgent"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Agents"
				]
			},
			"get": {
				"summary": "Returns information about an agent",
				"description": "Returns information about an agent",
				"operationId": "getIntegrationAgent",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-agentId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrationAgent"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/integration-services": {
			"get": {
				"summary": "List integration services",
				"description": "List integration services",
				"operationId": "getIntegrationServices",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_IntegrationService_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Agents"
				]
			}
		},
		"/logs": {
			"post": {
				"summary": "Logging",
				"description": "Logging",
				"operationId": "postLogs",
				"responses": {
					"202": {
						"description": "Accepted"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Logs"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogEntryInput"
							}
						}
					},
					"description": "A log entry",
					"required": true
				}
			}
		},
		"/notification-filters": {
			"get": {
				"summary": "Get notification filters",
				"description": "Get notification filters",
				"operationId": "getNotificationFilters",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-planId"
					},
					{
						"$ref": "#/components/parameters/query-formId"
					},
					{
						"$ref": "#/components/parameters/query-integrationId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_NotificationFilter_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Notification Filters"
				]
			},
			"post": {
				"summary": "Add or update notification filters",
				"description": "Add or update notification filters",
				"operationId": "postNotificationFilter",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotificationFilter"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotificationFilter"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Notification Filters"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NotificationFilterInput"
							}
						}
					},
					"description": "A insert or update",
					"required": true
				}
			}
		},
		"/notification-filters/{notificationFilterId}": {
			"get": {
				"summary": "Get notification filter",
				"description": "Get notification filter",
				"operationId": "getNotificationFilter",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-notificationFilterId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotificationFilter"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Notification Filters"
				]
			},
			"delete": {
				"summary": "Delete notification filter",
				"description": "Delete notification filter",
				"operationId": "deleteNotificationFilter",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-notificationFilterId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotificationFilter"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Notification Filters"
				]
			}
		},
		"/oauth2/token": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Generate a token",
				"description": "Generate a token",
				"operationId": "postAccessToken",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AccessToken"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Credentials"
							}
						}
					},
					"description": "Authentication credentials",
					"required": true
				}
			}
		},
		"/on-call": {
			"get": {
				"summary": "On call report",
				"description": "On call report",
				"operationId": "getOnCall",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-at"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					},
					{
						"$ref": "#/components/parameters/query-groups"
					},
					{
						"$ref": "#/components/parameters/query-from"
					},
					{
						"$ref": "#/components/parameters/query-to"
					},
					{
						"$ref": "#/components/parameters/query-shiftId"
					},
					{
						"description": "Limit number of shift occurrence members returned",
						"in": "query",
						"name": "membersPerShift",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_OnCall_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Reports"
				]
			}
		},
		"/organization": {
			"get": {
				"summary": "Returns information about the organization",
				"description": "Returns information about the organization",
				"operationId": "getOrganization",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Organization"
				]
			},
			"post": {
				"summary": "Update an organization",
				"description": "Update an organization",
				"operationId": "postOrganization",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Organization"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrganizationInput"
							}
						}
					},
					"description": "Data for update",
					"required": true
				}
			},
			"delete": {
				"summary": "Deletes the organization",
				"description": "Deletes the organization as determined by the domain. This is kind of a big deal so should be authorized only to services.",
				"operationId": "deleteOrganization",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Organization"
				]
			}
		},
		"/organization/config": {
			"get": {
				"summary": "Organization configuration",
				"description": "Organization configuration",
				"operationId": "getOrganizationConfig",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationConfig"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Organization"
				]
			},
			"post": {
				"summary": "Set organization configuration",
				"description": "Set organization configuration",
				"operationId": "postOrganizationConfig",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationConfig"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Organization"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrganizationConfigInput"
							}
						}
					},
					"description": "Data for insert or update",
					"required": true
				}
			}
		},
		"/permissibles": {
			"get": {
				"summary": "Search permissible entities",
				"description": "Search permissible entities",
				"operationId": "getPermissibles",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Permissible_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Permissable"
				]
			}
		},
		"/people": {
			"get": {
				"description": "Returns information about users",
				"operationId": "getPeople",
				"parameters": [
					{
						"description": "Case insensitive substring match within firstName, lastName, id, targetName, webLogin, email, phoneNumber. Search terms may be separated by spaces, results are returned that match ANY of the search terms",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"$ref": "#/components/parameters/query-webLogin"
					},
					{
						"$ref": "#/components/parameters/query-role"
					},
					{
						"$ref": "#/components/parameters/query-propertyName"
					},
					{
						"$ref": "#/components/parameters/query-propertyValue"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					},
					{
						"description": "Recipient status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE",
								"INVALID"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Person_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about users",
				"tags": [
					"People"
				]
			},
			"post": {
				"description": "Creates a new user",
				"operationId": "postPerson",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Creates a new user",
				"tags": [
					"People"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonInput"
							}
						}
					},
					"description": "An object that describes the new user",
					"required": true
				}
			}
		},
		"/people/{personId}": {
			"delete": {
				"description": "Deletes a user",
				"operationId": "deletePerson",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Deletes a user",
				"tags": [
					"People"
				]
			},
			"get": {
				"description": "Returns information about a user",
				"operationId": "getPerson",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a user",
				"tags": [
					"People"
				]
			}
		},
		"/people/{personId}/api-keys": {
			"get": {
				"summary": "Get API keys",
				"description": "Get API keys",
				"operationId": "getPersonAPIKeys",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_APIKey_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"People"
				]
			},
			"post": {
				"summary": "Add an API Key",
				"description": "Add an API Key",
				"operationId": "postPersonAPIKey",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIKey"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIKey"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"People"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/APIKeyInput"
							}
						}
					},
					"description": "API Key",
					"required": true
				}
			}
		},
		"/people/{personId}/devices": {
			"get": {
				"description": "Retrieves a list of a user's devices. Use embed=timeframes to include device timeframes in the response",
				"operationId": "getPersonDevices",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					},
					{
						"$ref": "#/components/parameters/query-phoneNumberFormat"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Device_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Retrieves a list of a user's devices",
				"tags": [
					"Devices"
				]
			},
			"put": {
				"description": "Set devices. Returns the pagination of the person's devices",
				"operationId": "putPersonDevices",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Device_"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Set devices",
				"tags": [
					"Devices"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "An array containing the device updates or insertions",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/DeviceInput"
								}
							}
						}
					},
					"description": "An array containing the device updates or insertions",
					"required": true
				}
			}
		},
		"/people/{personId}/groups": {
			"get": {
				"summary": "Get user's groups",
				"description": "Retrieves a list of a groups the user, or any of their devices is a member of",
				"operationId": "getPersonGroups",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Group_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"People"
				]
			}
		},
		"/people/{personId}/group-memberships": {
			"get": {
				"summary": "Get user's group memberships",
				"description": "Retrieves a list of user's group memberships. Use embed=group to embed the group",
				"operationId": "getPersonGroupMemberships",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/query-personIdMatch"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_GroupMember_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"People"
				]
			}
		},
		"/people/{personId}/refresh-tokens": {
			"get": {
				"tags": [
					"Authentication"
				],
				"summary": "Returns refresh tokens for a user",
				"description": "Returns refresh tokens for a user",
				"operationId": "getPersonRefreshTokens",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_RefreshToken_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			},
			"delete": {
				"tags": [
					"Authentication"
				],
				"summary": "Revoke all refresh tokens for a user",
				"description": "Revoke all refresh tokens for a user",
				"operationId": "deletePersonRefreshTokens",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_RefreshToken_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			}
		},
		"/people/{personId}/refresh-tokens/{tokenId}": {
			"delete": {
				"tags": [
					"Authentication"
				],
				"summary": "Invalidates a person's refresh token",
				"description": "Invalidates a person's refresh token",
				"operationId": "deletePersonRefreshToken",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/path-tokenId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshToken"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				}
			}
		},
		"/people/{personId}/roles": {
			"get": {
				"tags": [
					"Authorization"
				],
				"summary": "Retrieves a list of a user's roles",
				"description": "Retrieves a list of a user's roles",
				"operationId": "getPersonRoles",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Role_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			},
			"patch": {
				"tags": [
					"Authorization"
				],
				"summary": "Add user roles",
				"description": "Add user roles",
				"operationId": "patchPersonRoles",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Role_"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "An array containing the roles to add",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/RolePointer"
								}
							}
						}
					},
					"description": "Role",
					"required": true
				}
			}
		},
		"/people/{personId}/roles/{roleId}": {
			"delete": {
				"tags": [
					"Authorization"
				],
				"summary": "Remove a person's role",
				"description": "Remove a person's role",
				"operationId": "deletePersonRole",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					},
					{
						"$ref": "#/components/parameters/path-roleId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Role"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				}
			}
		},
		"/people/{personId}/functions": {
			"get": {
				"tags": [
					"Authorization"
				],
				"summary": "Retrieves a list of a user's functions",
				"description": "Retrieves a list of a user's functions",
				"operationId": "getPersonFunctions",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Function_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			}
		},
		"/people/{personId}/password": {
			"post": {
				"tags": [
					"Authentication"
				],
				"summary": "Set user password",
				"description": "Set user password",
				"operationId": "postPersonPassword",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "password",
								"properties": {
									"password": {
										"type": "string"
									}
								},
								"required": [
									"password"
								],
								"type": "object"
							}
						}
					},
					"description": "Password",
					"required": true
				}
			}
		},
		"/people/{personId}/permissions": {
			"get": {
				"tags": [
					"Authorization"
				],
				"summary": "Retrieves a list of a user's permissions",
				"description": "Retrieves a list of a user's permissions",
				"operationId": "getPersonPermissions",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Permission_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			}
		},
		"/people/{personId}/supervisors": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Retrieves a list of a user's supervisors",
				"description": "Retrieves a list of a user's supervisors",
				"operationId": "getPersonSupervisors",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-personId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Person_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				}
			}
		},
		"/plans": {
			"get": {
				"summary": "List communication plans",
				"description": "List communication plans",
				"operationId": "getPlans",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-planType"
					},
					{
						"$ref": "#/components/parameters/query-builtInPlanType"
					},
					{
						"description": "Is a custom integration (Has email initiation, or is webservice enabled, or has an inbound, or outbound integration)",
						"in": "query",
						"name": "customIntegration",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "Is accessible by specified user",
						"in": "query",
						"name": "accessibleBy",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Comma separated list of linked domain entities to embed in the response. Includes constants, endpoints, forms, integrations, integrations.ownerApiKey, integrations.agents, permitted",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Sort results by",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"NAME",
								"USER_DEFINED"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-sortOrder"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Plan_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"post": {
				"summary": "Add or update a communication plan",
				"description": "Add or update a communication plan",
				"operationId": "postPlan",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PlanInput"
							}
						}
					},
					"description": "Plan",
					"required": true
				}
			}
		},
		"/plans/{planId}": {
			"get": {
				"summary": "Get communication plan",
				"description": "Get communication plan",
				"operationId": "getPlan",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"description": "Comma separated list of linked domain entities to embed in the response. Includes constants, endpoints, forms, integrations, integrations.ownerApiKey, integrations.agents, permitted",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"delete": {
				"summary": "Delete a plan",
				"description": "Delete a plan",
				"operationId": "deletePlan",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/constants": {
			"get": {
				"summary": "List plan constants",
				"description": "List plan constants",
				"operationId": "getPlanConstants",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Constant_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"post": {
				"summary": "Add or update plan constants",
				"description": "Add or update plan constants",
				"operationId": "postPlanConstant",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Constant"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ConstantInput"
							}
						}
					},
					"description": "Plan Constant",
					"required": true
				}
			}
		},
		"/plans/{planId}/constants/{constantId}": {
			"get": {
				"summary": "Get communication plan constant",
				"description": "Get communication plan constant",
				"operationId": "getPlanConstant",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-constantId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Constant"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"delete": {
				"summary": "Delete a plan constant",
				"description": "Delete a plan constant",
				"operationId": "deletePlanConstant",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-constantId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Constant"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/endpoints": {
			"get": {
				"summary": "List plan endpoints",
				"description": "List plan endpoints",
				"operationId": "getPlanEndpoints",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Endpoint_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"post": {
				"summary": "Add or update plan endpoints",
				"description": "Add or update plan endpoints",
				"operationId": "postPlanEndpoint",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Endpoint"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EndpointInput"
							}
						}
					},
					"description": "Plan Endpoint",
					"required": true
				}
			}
		},
		"/plans/{planId}/endpoints/{endpointId}": {
			"get": {
				"summary": "Get communication plan endpoint",
				"description": "Get communication plan endpoint",
				"operationId": "getPlanEndpoint",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-endpointId"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Endpoint"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"delete": {
				"summary": "Delete a plan endpoint",
				"description": "Delete a plan endpoint",
				"operationId": "deletePlanEndpoint",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-endpointId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Endpoint"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/forms": {
			"get": {
				"description": "List of forms",
				"operationId": "getPlanForms",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"description": "Sort results by",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"NAME",
								"USER_DEFINED"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-sortOrder"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Form_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List of forms",
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/forms/{formId}/recipients": {
			"get": {
				"description": "List of plan recipients",
				"operationId": "getPlanFormRecipients",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-formId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Recipient_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List of plan recipients",
				"tags": [
					"Communication Plans"
				]
			},
			"put": {
				"summary": "Replace form recipients",
				"description": "Replace form recipients",
				"operationId": "putPlanFormRecipients",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-formId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Recipient_"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "An array containing the form recipients",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/RecipientPointer"
								}
							}
						}
					},
					"description": "Form recipients",
					"required": true
				}
			}
		},
		"/plans/{planId}/forms/{formId}/scenarios": {
			"get": {
				"description": "List of scenarios",
				"operationId": "getPlanFormScenarios",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-formId"
					},
					{
						"description": "Sort results by",
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"NAME",
								"USER_DEFINED"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-sortOrder"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Scenario_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "List of scenarios",
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/forms/{formId}/triggers": {
			"post": {
				"description": "Submit a form (intiates an event)",
				"operationId": "postTrigger",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-formId"
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Event"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"summary": "Submit a form",
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/EventInput"
				}
			}
		},
		"/plans/{planId}/integrations": {
			"get": {
				"summary": "List plan integrations",
				"description": "List plan integrations",
				"operationId": "getPlanIntegrations",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"description": "Comma separated list of linked domain entities to embed in the response. Includes ownerApiKey, agents",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Integration_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"post": {
				"summary": "Insert or update an integration",
				"description": "Insert or update an integration",
				"operationId": "postPlanIntegration",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Integration"
								}
							}
						}
					},
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Integration"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IntegrationInput"
							}
						}
					},
					"required": true
				}
			}
		},
		"/plans/{planId}/integrations/{integrationId}": {
			"get": {
				"summary": "Get an integration",
				"description": "Get an integration",
				"operationId": "getPlanIntegration",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-integrationId"
					},
					{
						"description": "Comma separated list of linked domain entities to embed in the response. Includes ownerApiKey, agents",
						"in": "query",
						"name": "embed",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Integration"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"delete": {
				"summary": "Delete an integration",
				"description": "Delete an integration",
				"operationId": "deletePlanIntegration",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-integrationId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Integration"
								}
							}
						}
					},
					"204": {
						"$ref": "#/components/responses/204"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/integrations/{integrationId}/agents": {
			"get": {
				"summary": "Get agents that can execute this integration",
				"description": "Get agents that can execute this integration",
				"operationId": "getPlanIntegrationAgents",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-integrationId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Agent_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/integrations/{integrationId}/logs": {
			"get": {
				"summary": "Get integration logs",
				"description": "Get integration logs",
				"operationId": "getPlanIntegrationLogs",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-integrationId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_IntegrationLog_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/integrations/{integrationId}/logs/{logId}": {
			"get": {
				"summary": "Get integration log",
				"description": "Get integration log as IntegrationLog object or file download",
				"operationId": "getPlanIntegrationLog",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/path-integrationId"
					},
					{
						"$ref": "#/components/parameters/path-logId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IntegrationLog"
								}
							},
							"application/octet-stream": {
								"schema": {
									"$ref": "#/components/schemas/IntegrationLog"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Communication Plans"
				]
			}
		},
		"/plans/{planId}/permitted": {
			"get": {
				"summary": "Get permitted entities",
				"description": "Get permitted entities",
				"operationId": "getPlanPermitted",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Permissible_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					}
				},
				"tags": [
					"Communication Plans"
				]
			},
			"put": {
				"summary": "Replace permitted entities",
				"description": "Replace permitted entities",
				"operationId": "putPlanPermitted",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-planId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Permissible_"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Communication Plans"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"description": "An array containing the permitted entities",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/PermissiblePointer"
								}
							}
						}
					},
					"description": "Permitted recipients",
					"required": true
				}
			}
		},
		"/recipients": {
			"get": {
				"description": "Returns information about potential recipients",
				"operationId": "getRecipients",
				"parameters": [
					{
						"description": "Case insensitive substring match within firstName, lastName, id, targetName, webLogin, email, phoneNumber. Search terms may be separated by spaces, results are returned that match ANY of the search terms",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "searchType",
						"in": "query",
						"name": "searchType",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"CONTAINS",
								"STARTS_WITH",
								"ENDS_WITH",
								"EQUALS"
							]
						}
					},
					{
						"description": "recipientType e.g. PERSON,DEVICE,GROUP",
						"in": "query",
						"name": "recipientType",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Recipient status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ACTIVE",
								"INACTIVE",
								"INVALID"
							]
						}
					},
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Recipient_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about event recipients",
				"tags": [
					"Recipients"
				]
			}
		},
		"/responses": {
			"post": {
				"summary": "Send a response",
				"description": "Send a response",
				"operationId": "postResponse",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Responses"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResponseInput"
							}
						}
					},
					"required": true
				}
			}
		},
		"/service-providers": {
			"get": {
				"description": "Returns information about configured service providers",
				"operationId": "getServiceProviders",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-offset"
					},
					{
						"$ref": "#/components/parameters/query-limit"
					},
					{
						"$ref": "#/components/parameters/query-deviceType"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_ServiceProvider_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about configured service providers",
				"tags": [
					"Service Providers"
				]
			}
		},
		"/sites/{siteId}": {
			"get": {
				"description": "Returns information about a site",
				"operationId": "getSite",
				"parameters": [
					{
						"$ref": "#/components/parameters/path-siteId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Site"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"summary": "Returns information about a site",
				"tags": [
					"Sites"
				]
			}
		},
		"/timeline": {
			"get": {
				"summary": "Get Timeline",
				"description": "Returns a list of timeline events",
				"operationId": "getTimeline",
				"parameters": [
					{
						"$ref": "#/components/parameters/query-incidentId"
					},
					{
						"$ref": "#/components/parameters/query-eventId"
					},
					{
						"$ref": "#/components/parameters/query-from"
					},
					{
						"$ref": "#/components/parameters/query-to"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Pagination_Event_"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"404": {
						"$ref": "#/components/responses/404"
					}
				},
				"tags": [
					"Reports"
				]
			}
		},
		"/vendor-responses": {
			"post": {
				"summary": "Report a vendor response",
				"description": "Report a vendor response",
				"operationId": "postVendorResponse",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VendorResponse"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/400"
					},
					"401": {
						"$ref": "#/components/responses/401"
					},
					"403": {
						"$ref": "#/components/responses/403"
					},
					"409": {
						"$ref": "#/components/responses/409"
					}
				},
				"tags": [
					"Responses"
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VendorResponseInput"
							}
						}
					},
					"required": true
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AccessToken": {
				"description": "Access token response",
				"properties": {
					"access_token": {
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					},
					"expires_in": {
						"type": "integer",
						"description": "Seconds till access_token expiry"
					},
					"token_type": {
						"type": "string",
						"enum": [
							"Bearer"
						]
					}
				},
				"required": [
					"access_token",
					"expires_in",
					"token_type"
				],
				"type": "object"
			},
			"Agent": {
				"description": "An agent",
				"properties": {
					"id": {
						"type": "string"
					},
					"externalId": {
						"type": "string",
						"description": "Legacy non-UUID identifier"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"os": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTED",
							"DISCONNECTED"
						]
					},
					"addresses": {
						"type": "string"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"owners": {
						"$ref": "#/components/schemas/Pagination_AgentOwner_"
					},
					"monitors": {
						"$ref": "#/components/schemas/Pagination_AgentMonitor_"
					}
				},
				"required": [
					"id",
					"externalId",
					"version",
					"os",
					"created"
				],
				"type": "object"
			},
			"AgentInput": {
				"description": "An agent",
				"properties": {
					"id": {
						"type": "string"
					},
					"externalId": {
						"type": "string",
						"description": "Legacy non-UUID identifier"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTED",
							"DISCONNECTED"
						]
					},
					"os": {
						"type": "string"
					},
					"addresses": {
						"type": "string"
					},
					"owners": {
						"description": "Owners of this agent",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AgentOwnerInput"
						}
					},
					"monitors": {
						"description": "Recipients monitoring this agent",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AgentMonitorInput"
						}
					}
				},
				"type": "object"
			},
			"AgentReference": {
				"description": "An agent",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"AgentPointer": {
				"description": "An agent",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"AgentInstaller": {
				"description": "Agent installation information",
				"properties": {
					"version": {
						"type": "string"
					},
					"minimumCompatibleVersion": {
						"type": "string"
					},
					"downloadURL": {
						"type": "string"
					},
					"host": {
						"type": "string"
					},
					"key": {
						"type": "string"
					}
				},
				"required": [
					"version",
					"minimumCompatibleVersion",
					"downloadURL",
					"host",
					"key"
				],
				"type": "object"
			},
			"AgentMonitor": {
				"description": "A recipient monitoring an agent",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for this specific monitoring subscription"
					},
					"agent": {
						"$ref": "#/components/schemas/AgentReference"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientReference"
					}
				},
				"required": [
					"id",
					"agent",
					"recipient"
				],
				"type": "object"
			},
			"AgentMonitorInput": {
				"description": "A recipient monitoring an agent",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for this specific monitoring subscription"
					},
					"agent": {
						"$ref": "#/components/schemas/AgentPointer"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientPointer"
					}
				},
				"type": "object"
			},
			"AgentOwner": {
				"description": "An agent owner",
				"properties": {
					"id": {
						"type": "string"
					},
					"agent": {
						"$ref": "#/components/schemas/AgentReference"
					},
					"owner": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"key": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"agent",
					"owner",
					"key"
				],
				"type": "object"
			},
			"AgentOwnerInput": {
				"description": "An agent owner",
				"properties": {
					"agent": {
						"$ref": "#/components/schemas/AgentPointer"
					},
					"owner": {
						"$ref": "#/components/schemas/PersonPointer"
					}
				},
				"required": [
					"agent",
					"owner"
				],
				"type": "object"
			},
			"APIKey": {
				"description": "An API Key",
				"properties": {
					"id": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"person": {
						"$ref": "#/components/schemas/PersonReference"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"APIKeyInput": {
				"description": "An API Key",
				"properties": {
					"id": {
						"type": "string"
					},
					"key": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"IntegrationAgent": {
				"properties": {
					"id": {
						"type": "string"
					},
					"externalId": {
						"type": "string",
						"description": "Legacy non-UUID identifier"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTED",
							"DISCONNECTED"
						]
					},
					"os": {
						"type": "string"
					},
					"statusAt": {
						"type": "string",
						"format": "date-time"
					},
					"url": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"externalId",
					"version",
					"status",
					"os"
				],
				"type": "object"
			},
			"IntegrationAgentInput": {
				"properties": {
					"id": {
						"type": "string"
					},
					"externalId": {
						"type": "string",
						"description": "Legacy non-UUID identifier"
					},
					"name": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTED",
							"DISCONNECTED"
						]
					},
					"os": {
						"type": "string"
					},
					"statusAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object"
			},
			"IntegrationService": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object"
			},
			"Audit": {
				"description": "An audit",
				"discriminator": {
					"propertyName": "auditType"
				},
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string"
					},
					"at": {
						"description": "Time this event happened (UTC)",
						"type": "string",
						"format": "date-time"
					},
					"auditType": {
						"description": "Audit types",
						"type": "string",
						"enum": [
							"EVENT_ANNOTATED",
							"EVENT_COMPLETED",
							"EVENT_CREATED",
							"EVENT_RESUMED",
							"EVENT_SUSPENDED",
							"EVENT_TERMINATED",
							"NOTIFICATION_DELAYED",
							"NOTIFICATION_DELIVERED",
							"NOTIFICATION_DISCARDED",
							"NOTIFICATION_ESCALATED",
							"NOTIFICATION_FAILED",
							"NOTIFICATION_SUPPRESSED",
							"RESPONSE_RECEIVED"
						]
					},
					"by": {
						"$ref": "#/components/schemas/PersonReference"
					}
				},
				"required": [
					"id",
					"at",
					"auditType"
				],
				"type": "object"
			},
			"EventAnnotatedAudit": {
				"description": "An event annotated audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_ANNOTATED"
								]
							},
							"annotation": {
								"$ref": "#/components/schemas/EventAnnotation"
							}
						},
						"required": [
							"auditType",
							"annotation"
						],
						"type": "object"
					}
				]
			},
			"EventCompletedAudit": {
				"description": "An event completed audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_COMPLETED"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"auditType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"EventCreatedAudit": {
				"description": "An event created audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_CREATED"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"auditType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"EventResumedAudit": {
				"description": "An event resumed audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_RESUMED"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"auditType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"EventSuspendedAudit": {
				"description": "An event suspended audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_SUSPENDED"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"auditType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"EventTerminatedAudit": {
				"description": "An event terminated audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"EVENT_TERMINATED"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"auditType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"ResponseReceivedAudit": {
				"description": "A response received audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"RESPONSE_RECEIVED"
								]
							},
							"response": {
								"$ref": "#/components/schemas/Response"
							}
						},
						"required": [
							"auditType",
							"response"
						],
						"type": "object"
					}
				]
			},
			"NotificationDeliveredAudit": {
				"description": "A notification delivered audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"NOTIFICATION_DELIVERED"
								]
							},
							"notification": {
								"$ref": "#/components/schemas/Notification"
							}
						},
						"required": [
							"auditType",
							"notification"
						],
						"type": "object"
					}
				]
			},
			"NotificationSuppressedAudit": {
				"description": "A notification suppressed audit",
				"allOf": [
					{
						"$ref": "#/components/schemas/Audit"
					},
					{
						"properties": {
							"auditType": {
								"type": "string",
								"enum": [
									"NOTIFICATION_SUPPRESSED"
								]
							},
							"notification": {
								"$ref": "#/components/schemas/Notification"
							}
						},
						"required": [
							"auditType",
							"notification"
						],
						"type": "object"
					}
				]
			},
			"Callback": {
				"properties": {
					"url": {
						"type": "string"
					},
					"type": {
						"enum": [
							"status",
							"deliveryStatus",
							"response"
						],
						"type": "string"
					},
					"authType": {
						"type": "string"
					},
					"authUserName": {
						"type": "string"
					},
					"authPassword": {
						"type": "string"
					},
					"iaId": {
						"type": "string"
					}
				},
				"required": [
					"url",
					"type"
				],
				"type": "object"
			},
			"Credentials": {
				"description": "Authentication credentials",
				"properties": {
					"grant_type": {
						"type": "string",
						"enum": [
							"password",
							"refresh_token"
						]
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					},
					"client_id": {
						"type": "string"
					},
					"client_secret": {
						"type": "string"
					}
				},
				"required": [
					"grant_type",
					"client_id"
				],
				"type": "object"
			},
			"Conference": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"BRIDGE",
							"EXTERNAL"
						]
					},
					"bridgeId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"sid": {
						"type": "string"
					},
					"startTime": {
						"type": "string",
						"format": "date-time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string",
						"enum": [
							"INACTIVE",
							"WAITING",
							"ACTIVE"
						]
					},
					"description": {
						"type": "string"
					},
					"host": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"activeParticipantCount": {
						"description": "Count of active conference participants",
						"type": "integer"
					},
					"participants": {
						"$ref": "#/components/schemas/Pagination_ConferenceParticipant_"
					},
					"events": {
						"$ref": "#/components/schemas/Pagination_Event_"
					}
				},
				"required": [
					"bridgeId",
					"type"
				],
				"type": "object"
			},
			"ConferencePointer": {
				"properties": {
					"type": {
						"enum": [
							"BRIDGE",
							"EXTERNAL"
						],
						"type": "string"
					},
					"bridgeId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"bridgeNumber": {
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"ConferenceReference": {
				"properties": {
					"bridgeId": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"BRIDGE",
							"EXTERNAL"
						]
					}
				},
				"required": [
					"type",
					"bridgeId"
				],
				"type": "object"
			},
			"ConferenceParticipant": {
				"properties": {
					"conference": {
						"$ref": "#/components/schemas/ConferenceReference"
					},
					"device": {
						"$ref": "#/components/schemas/DeviceReference"
					},
					"member": {
						"type": "string",
						"description": "Plivo member"
					},
					"sid": {
						"type": "string"
					},
					"muted": {
						"type": "boolean"
					},
					"joined": {
						"type": "string",
						"format": "date-time"
					},
					"left": {
						"type": "string",
						"format": "date-time"
					},
					"displayName": {
						"type": "string"
					},
					"extensionInProgress": {
						"type": "boolean"
					},
					"warnedForExtension": {
						"type": "string",
						"format": "date-time"
					},
					"phoneNumber": {
						"type": "string"
					},
					"willCallToExtend": {
						"type": "boolean"
					},
					"retries": {
						"type": "integer"
					}
				},
				"required": [
					"conference"
				],
				"type": "object"
			},
			"ConferenceParticipantInput": {
				"properties": {
					"conference": {
						"$ref": "#/components/schemas/ConferencePointer"
					},
					"device": {
						"$ref": "#/components/schemas/DevicePointer"
					},
					"member": {
						"type": "string",
						"description": "Plivo member id"
					},
					"sid": {
						"type": "string"
					},
					"muted": {
						"type": "boolean"
					},
					"joined": {
						"type": "string",
						"format": "date-time"
					},
					"left": {
						"type": "string",
						"format": "date-time"
					},
					"displayName": {
						"type": "string"
					},
					"extensionInProgress": {
						"type": "boolean"
					},
					"warnedForExtension": {
						"type": "string",
						"format": "date-time"
					},
					"phoneNumber": {
						"type": "string"
					},
					"willCallToExtend": {
						"type": "boolean"
					},
					"retries": {
						"type": "integer"
					}
				},
				"required": [
					"conference"
				],
				"type": "object"
			},
			"Constant": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"plan",
					"name",
					"value"
				],
				"type": "object"
			},
			"ConstantInput": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanPointer"
					},
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object"
			},
			"Country": {
				"description": "A country",
				"properties": {
					"code2": {
						"type": "string"
					},
					"code3": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"code2",
					"code3",
					"name"
				],
				"type": "object"
			},
			"DeepLink": {
				"properties": {
					"token": {
						"description": "Universally unique token",
						"type": "string"
					},
					"expiry": {
						"description": "Expiry date",
						"type": "string",
						"format": "date-time"
					},
					"url": {
						"description": "Link URL",
						"type": "string"
					},
					"action": {
						"type": "string"
					},
					"status": {
						"description": "Status of the token",
						"type": "string",
						"enum": [
							"UNUSED",
							"USED"
						]
					},
					"attributes": {
						"type": "object"
					}
				},
				"required": [
					"token",
					"expiry",
					"url",
					"action",
					"status"
				],
				"type": "object"
			},
			"DeepLinkInput": {
				"properties": {
					"expiry": {
						"description": "Expiry date",
						"type": "string",
						"format": "date-time"
					},
					"url": {
						"description": "Link URL",
						"type": "string"
					},
					"action": {
						"type": "string",
						"description": "Code to be used by URL handler to determine action"
					},
					"status": {
						"description": "Status of the token",
						"type": "string",
						"enum": [
							"UNUSED",
							"USED"
						]
					},
					"attributes": {
						"type": "object"
					}
				},
				"required": [
					"expiry",
					"url",
					"action"
				],
				"type": "object"
			},
			"DeviceName": {
				"description": "Customer defined Device categories e.g. Work Email",
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string",
						"format": "uuid"
					},
					"deviceType": {
						"description": "The type of the device",
						"type": "string",
						"enum": [
							"ANDROID_PUSH",
							"APPLE_PUSH",
							"BLACKBERRY_PUSH",
							"BROWSER",
							"EMAIL",
							"FAX",
							"GENERIC",
							"IM",
							"NUMERIC_PAGER",
							"TEXT_PAGER",
							"TEXT_PHONE",
							"VOICE",
							"VOICE_IVR"
						]
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"domains": {
						"type": "string"
					}
				},
				"required": [
					"deviceType",
					"name",
					"description"
				],
				"type": "object"
			},
			"DeviceNamePointer": {
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string",
						"format": "uuid"
					},
					"deviceType": {
						"description": "The type of the device",
						"type": "string",
						"enum": [
							"ANDROID_PUSH",
							"APPLE_PUSH",
							"BLACKBERRY_PUSH",
							"BROWSER",
							"EMAIL",
							"FAX",
							"GENERIC",
							"IM",
							"NUMERIC_PAGER",
							"TEXT_PAGER",
							"TEXT_PHONE",
							"VOICE",
							"VOICE_IVR"
						]
					},
					"name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"DeviceNameReference": {
				"description": "Customer defined Device categories e.g. Work Email",
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string",
						"format": "uuid"
					},
					"deviceType": {
						"description": "The type of the device",
						"type": "string",
						"enum": [
							"ANDROID_PUSH",
							"APPLE_PUSH",
							"BLACKBERRY_PUSH",
							"BROWSER",
							"EMAIL",
							"FAX",
							"GENERIC",
							"IM",
							"NUMERIC_PAGER",
							"TEXT_PAGER",
							"TEXT_PHONE",
							"VOICE",
							"VOICE_IVR"
						]
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				},
				"required": [
					"deviceType",
					"name",
					"description"
				],
				"type": "object"
			},
			"Device": {
				"discriminator": {
					"propertyName": "deviceType"
				},
				"allOf": [
					{
						"$ref": "#/components/schemas/Recipient"
					},
					{
						"description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts",
						"discriminator": {
							"propertyName": "deviceType"
						},
						"properties": {
							"defaultDevice": {
								"description": "True if this device can receive notifications when the user has no active devices",
								"type": "boolean"
							},
							"delay": {
								"description": "The number of minutes to wait for a response before contacting the next device",
								"format": "int32",
								"type": "integer"
							},
							"description": {
								"description": "A description of the device",
								"type": "string"
							},
							"deviceType": {
								"description": "The type of the device",
								"type": "string",
								"enum": [
									"ANDROID_PUSH",
									"APPLE_PUSH",
									"BLACKBERRY_PUSH",
									"BROWSER",
									"EMAIL",
									"FAX",
									"GENERIC",
									"IM",
									"NUMERIC_PAGER",
									"TEXT_PAGER",
									"TEXT_PHONE",
									"VOICE",
									"VOICE_IVR"
								]
							},
							"name": {
								"description": "The name of the device. Example: Work Email, Home Phone",
								"type": "string"
							},
							"notifications": {
								"$ref": "#/components/schemas/Pagination_Notification_"
							},
							"owner": {
								"$ref": "#/components/schemas/PersonReference"
							},
							"priorityThreshold": {
								"description": "The minimum priority of an event for it to be delivered to this device",
								"enum": [
									"LOW",
									"HIGH",
									"MEDIUM"
								],
								"type": "string"
							},
							"provider": {
								"$ref": "#/components/schemas/ServiceProviderReference"
							},
							"recipientType": {
								"enum": [
									"DEVICE"
								],
								"type": "string"
							},
							"sequence": {
								"description": "The order in which the device will be contacted, where 0 represents the first device contacted",
								"format": "int32",
								"type": "integer"
							},
							"testStatus": {
								"description": "Whether the device has been tested",
								"enum": [
									"TESTED",
									"UNTESTED",
									"PENDING",
									"INVALID"
								],
								"type": "string"
							},
							"timeframes": {
								"$ref": "#/components/schemas/Pagination_DeviceTimeframe_"
							}
						},
						"required": [
							"owner",
							"deviceType"
						],
						"type": "object"
					}
				]
			},
			"DeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientInput"
					},
					{
						"description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts",
						"discriminator": {
							"propertyName": "deviceType"
						},
						"properties": {
							"defaultDevice": {
								"description": "True if this device can receive notifications when the user has no active devices. a.k.a. Fail-safe device",
								"type": "boolean"
							},
							"delay": {
								"description": "The number of minutes to wait for a response before contacting the next device",
								"format": "int32",
								"type": "integer"
							},
							"deviceType": {
								"description": "The type of the device",
								"type": "string",
								"enum": [
									"ANDROID_PUSH",
									"APPLE_PUSH",
									"BLACKBERRY_PUSH",
									"BROWSER",
									"EMAIL",
									"FAX",
									"GENERIC",
									"IM",
									"NUMERIC_PAGER",
									"TEXT_PAGER",
									"TEXT_PHONE",
									"VOICE",
									"VOICE_IVR"
								]
							},
							"name": {
								"description": "The name of the device. Example: Work Email, Home Phone",
								"type": "string"
							},
							"owner": {
								"$ref": "#/components/schemas/PersonPointer"
							},
							"priorityThreshold": {
								"description": "The minimum priority of an event for it to be delivered to this device",
								"enum": [
									"LOW",
									"HIGH",
									"MEDIUM"
								],
								"type": "string"
							},
							"provider": {
								"$ref": "#/components/schemas/ServiceProviderPointer"
							},
							"recipientType": {
								"enum": [
									"DEVICE"
								],
								"type": "string"
							},
							"sequence": {
								"description": "The order in which the device will be contacted, where 0 represents the first device contacted",
								"format": "int32",
								"type": "integer"
							},
							"testStatus": {
								"description": "Whether the device has been tested",
								"enum": [
									"TESTED",
									"UNTESTED",
									"PENDING",
									"INVALID"
								],
								"type": "string"
							},
							"timeframes": {
								"description": "Timeframes when this device is active",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/DeviceTimeframeInput"
								}
							}
						},
						"required": [
							"deviceType",
							"name",
							"owner"
						],
						"type": "object"
					}
				]
			},
			"DevicePointer": {
				"description": "A pointer to a device",
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientPointer"
					},
					{
						"properties": {
							"targetName": {
								"description": "The target name of the resource",
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"DeviceReference": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientReference"
					},
					{
						"properties": {
							"id": {
								"description": "The identifier of the resource",
								"type": "string"
							},
							"targetName": {
								"description": "The target name of the resource",
								"type": "string"
							},
							"recipientType": {
								"type": "string",
								"enum": [
									"DEVICE"
								]
							},
							"deviceType": {
								"description": "The type of the device",
								"type": "string",
								"enum": [
									"ANDROID_PUSH",
									"APPLE_PUSH",
									"BLACKBERRY_PUSH",
									"BROWSER",
									"EMAIL",
									"FAX",
									"GENERIC",
									"IM",
									"NUMERIC_PAGER",
									"TEXT_PAGER",
									"TEXT_PHONE",
									"VOICE",
									"VOICE_IVR"
								]
							},
							"name": {
								"description": "The name of the device. Example: Work Email, Home Phone",
								"type": "string"
							},
							"links": {
								"$ref": "#/components/schemas/SelfLink"
							}
						},
						"required": [
							"id",
							"targetName",
							"deviceType"
						],
						"type": "object"
					}
				]
			},
			"AndroidPushDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"ANDROID_PUSH"
								],
								"type": "string"
							},
							"registrationId": {
								"type": "string"
							}
						},
						"required": [
							"registrationId"
						],
						"type": "object"
					}
				]
			},
			"AndroidPushDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"ANDROID_PUSH"
								],
								"type": "string"
							},
							"registrationId": {
								"type": "string"
							}
						},
						"required": [
							"accountId",
							"registrationId"
						],
						"type": "object"
					}
				]
			},
			"ApplePushDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"alertSound": {
								"type": "string"
							},
							"apnToken": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"APPLE_PUSH"
								],
								"type": "string"
							},
							"soundStatus": {
								"type": "string"
							},
							"soundThreshold": {
								"enum": [
									"LOW",
									"MEDIUM",
									"HIGH"
								],
								"type": "string"
							}
						},
						"required": [
							"accountId",
							"apnToken"
						],
						"type": "object"
					}
				]
			},
			"ApplePushDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"alertSound": {
								"type": "string"
							},
							"apnToken": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"APPLE_PUSH"
								],
								"type": "string"
							},
							"soundStatus": {
								"type": "string"
							},
							"soundThreshold": {
								"enum": [
									"LOW",
									"MEDIUM",
									"HIGH"
								],
								"type": "string"
							}
						},
						"required": [
							"accountId",
							"apnToken"
						],
						"type": "object"
					}
				]
			},
			"BlackberryPushDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"BLACKBERRY_PUSH"
								],
								"type": "string"
							},
							"registrationId": {
								"type": "string"
							}
						},
						"required": [
							"accountId",
							"registrationId"
						],
						"type": "object"
					}
				]
			},
			"BlackberryPushDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"accountId": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"BLACKBERRY_PUSH"
								],
								"type": "string"
							},
							"registrationId": {
								"type": "string"
							}
						},
						"required": [
							"accountId",
							"registrationId"
						],
						"type": "object"
					}
				]
			},
			"EmailDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"EMAIL"
								],
								"type": "string"
							},
							"emailAddress": {
								"type": "string"
							}
						},
						"required": [
							"emailAddress"
						],
						"type": "object"
					}
				]
			},
			"EmailDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"EMAIL"
								],
								"type": "string"
							},
							"emailAddress": {
								"type": "string"
							}
						},
						"required": [
							"emailAddress"
						],
						"type": "object"
					}
				]
			},
			"FaxDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"country": {
								"enum": [
									"AR",
									"AU",
									"BR",
									"CA",
									"FR",
									"DE",
									"HK",
									"IN",
									"IT",
									"JP",
									"PT",
									"PR",
									"GB",
									"US"
								],
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"FAX"
								],
								"type": "string"
							},
							"phoneNumber": {
								"pattern": "^\\d{5,20}$",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"FaxDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"country": {
								"enum": [
									"AR",
									"AU",
									"BR",
									"CA",
									"FR",
									"DE",
									"HK",
									"IN",
									"IT",
									"JP",
									"PT",
									"PR",
									"GB",
									"US"
								],
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"FAX"
								],
								"type": "string"
							},
							"phoneNumber": {
								"pattern": "^\\d{5,20}$",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"GenericDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"GENERIC"
								],
								"type": "string"
							},
							"pin": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"GenericDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"GENERIC"
								],
								"type": "string"
							},
							"pin": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"IMDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"address": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"IM"
								],
								"type": "string"
							}
						},
						"required": [
							"address"
						],
						"type": "object"
					}
				]
			},
			"IMDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"address": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"IM"
								],
								"type": "string"
							}
						},
						"required": [
							"address"
						],
						"type": "object"
					}
				]
			},
			"NumericPagerDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"areaCode": {
								"type": "string"
							},
							"country": {
								"type": "string"
							},
							"deviceType": {
								"type": "string",
								"enum": [
									"NUMERIC_PAGER"
								]
							},
							"pagerNumber": {
								"type": "string"
							},
							"pin": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"NumericPagerDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"areaCode": {
								"type": "string"
							},
							"country": {
								"type": "string"
							},
							"deviceType": {
								"enum": [
									"NUMERIC_PAGER"
								],
								"type": "string"
							},
							"pagerNumber": {
								"type": "string"
							},
							"pin": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"PublicAddressDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"description": "a.k.a. Voice IVR",
						"properties": {
							"deviceType": {
								"enum": [
									"VOICE_IVR"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including +, country code, and extension",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"PublicAddressDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"description": "a.k.a. Voice IVR",
						"properties": {
							"deviceType": {
								"enum": [
									"VOICE_IVR"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including country code and extension",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"SMSDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"TEXT_PHONE"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including + and country code",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"SMSDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"TEXT_PHONE"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including country code and extension",
								"type": "string"
							}
						},
						"required": [
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"TextPagerDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"TEXT_PAGER"
								],
								"type": "string"
							},
							"pin": {
								"type": "string"
							},
							"twoWayDevice": {
								"type": "boolean"
							}
						},
						"required": [
							"pin",
							"twoWayDevice"
						],
						"type": "object"
					}
				]
			},
			"TextPagerDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"TEXT_PAGER"
								],
								"type": "string"
							},
							"pin": {
								"type": "string"
							},
							"twoWayDevice": {
								"type": "boolean"
							}
						},
						"required": [
							"pin",
							"twoWayDevice"
						],
						"type": "object"
					}
				]
			},
			"VoiceDevice": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Device"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"VOICE"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including +, country code, and extension",
								"type": "string"
							}
						},
						"required": [
							"deviceType",
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"VoiceDeviceInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/DeviceInput"
					},
					{
						"properties": {
							"deviceType": {
								"enum": [
									"VOICE"
								],
								"type": "string"
							},
							"phoneNumber": {
								"description": "E.164 international format phone number including country code and extension",
								"type": "string"
							}
						},
						"required": [
							"deviceType",
							"phoneNumber"
						],
						"type": "object"
					}
				]
			},
			"DeviceTimeframe": {
				"description": "The timeframe in which a device is available to receive notifications",
				"properties": {
					"days": {
						"description": "List of the days of the week this timeframe is active",
						"items": {
							"enum": [
								"SU",
								"MO",
								"TU",
								"WE",
								"TH",
								"FR",
								"SA"
							],
							"type": "string"
						},
						"type": "array"
					},
					"durationInMinutes": {
						"description": "The length of the timeframe in minutes",
						"format": "int32",
						"type": "integer"
					},
					"excludeHolidays": {
						"description": "True if the timeframe is not active on holidays",
						"type": "boolean"
					},
					"name": {
						"description": "Name of the Timeframe. Example: \"After hours\"",
						"type": "string"
					},
					"startTime": {
						"description": "The time of day that the timeframe begins, in the device owners timezone",
						"type": "string"
					},
					"timezone": {
						"description": "The time zone of the device owner. Example:  US/Pacific",
						"type": "string"
					}
				},
				"required": [
					"name",
					"startTime",
					"durationInMinutes",
					"excludeHolidays"
				],
				"type": "object"
			},
			"DeviceTimeframeInput": {
				"description": "The timeframe in which a device is available to receive notifications",
				"properties": {
					"days": {
						"description": "List of the days of the week this timeframe is active",
						"items": {
							"enum": [
								"SU",
								"MO",
								"TU",
								"WE",
								"TH",
								"FR",
								"SA"
							],
							"type": "string"
						},
						"type": "array"
					},
					"durationInMinutes": {
						"description": "The length of the timeframe in minutes",
						"format": "int32",
						"type": "integer"
					},
					"excludeHolidays": {
						"description": "True if the timeframe is not active on holidays",
						"type": "boolean"
					},
					"name": {
						"description": "Name of the Timeframe. Example: \"After hours\"",
						"type": "string"
					},
					"startTime": {
						"description": "The time of day that the timeframe begins, in the device owners timezone",
						"type": "string"
					}
				},
				"required": [
					"name",
					"startTime",
					"durationInMinutes",
					"excludeHolidays"
				],
				"type": "object"
			},
			"Event": {
				"description": "An event in the xMatters system",
				"properties": {
					"id": {
						"description": "An identifier (UUID) that represents this resource",
						"type": "string"
					},
					"eventId": {
						"description": "A legacy identifier (numeric) that represents this resource",
						"type": "string"
					},
					"eventType": {
						"description": "User generated or System generated event",
						"type": "string",
						"enum": [
							"USER",
							"SYSTEM"
						]
					},
					"systemEventType": {
						"description": "System event type",
						"type": "string",
						"enum": [
							"DEVICE_VALIDATION",
							"FORGOT_MY_PASSWORD",
							"EPIC_NOTIFICATION",
							"ON_CALL_START_SHIFT",
							"SUPERVISOR_RESET",
							"TEMP_REPLACEMENT",
							"TEMP_REPLACEMENT_SUP",
							"SYSTEM_MESSAGE"
						]
					},
					"name": {
						"description": "Presentation name derived from various data sources depending on the type of the event",
						"type": "string"
					},
					"bypassPhoneIntro": {
						"type": "boolean"
					},
					"conference": {
						"$ref": "#/components/schemas/ConferenceReference"
					},
					"created": {
						"format": "date-time",
						"type": "string"
					},
					"escalationOverride": {
						"type": "boolean"
					},
					"expirationInMinutes": {
						"type": "integer"
					},
					"terminated": {
						"format": "date-time",
						"type": "string"
					},
					"form": {
						"$ref": "#/components/schemas/FormReference"
					},
					"incident": {
						"type": "string"
					},
					"integration": {
						"$ref": "#/components/schemas/IntegrationReference"
					},
					"otherResponseCount": {
						"type": "integer"
					},
					"overrideDeviceRestrictions": {
						"default": false,
						"type": "boolean"
					},
					"priority": {
						"type": "string",
						"enum": [
							"LOW",
							"MEDIUM",
							"HIGH"
						]
					},
					"properties": {
						"description": "Map of property names and values",
						"type": "object"
					},
					"recipients": {
						"$ref": "#/components/schemas/Pagination_Recipient_"
					},
					"requestId": {
						"type": "string"
					},
					"requirePhonePassword": {
						"type": "boolean"
					},
					"responseCountsEnabled": {
						"default": false,
						"type": "boolean"
					},
					"responseOptions": {
						"$ref": "#/components/schemas/Pagination_ResponseOption_"
					},
					"senderOverrides": {
						"type": "object"
					},
					"status": {
						"type": "string",
						"enum": [
							"ACTIVE",
							"SUSPENDED",
							"TERMINATED"
						]
					},
					"targetAllDevices": {
						"description": "Target all device types",
						"type": "boolean"
					},
					"targetDeviceNames": {
						"description": "Target specific device categories",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/DeviceName"
						}
					},
					"floodControl": {
						"type": "boolean",
						"description": "True if filtering and suppression was active"
					},
					"submitter": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"voicemailOptions": {
						"description": "Voicemail Options",
						"properties": {
							"every": {
								"type": "integer"
							},
							"leave": {
								"type": "string"
							},
							"retry": {
								"type": "integer"
							}
						},
						"type": "object"
					},
					"messages": {
						"$ref": "#/components/schemas/Pagination_Message_"
					},
					"annotations": {
						"$ref": "#/components/schemas/Pagination_EventAnnotation_"
					}
				},
				"required": [
					"id",
					"eventId",
					"created",
					"status",
					"priority"
				],
				"type": "object"
			},
			"EventInput": {
				"description": "A form submission",
				"properties": {
					"id": {
						"description": "An identifier (UUID) that represents this resource",
						"type": "string"
					},
					"bypassPhoneIntro": {
						"default": false,
						"type": "boolean"
					},
					"callbacks": {
						"items": {
							"$ref": "#/components/schemas/Callback"
						},
						"type": "array"
					},
					"conference": {
						"$ref": "#/components/schemas/ConferencePointer"
					},
					"escalationOverride": {
						"default": false,
						"type": "boolean"
					},
					"expirationInMinutes": {
						"type": "integer"
					},
					"form": {
						"$ref": "#/components/schemas/FormPointer"
					},
					"incident": {
						"type": "string"
					},
					"integration": {
						"$ref": "#/components/schemas/IntegrationPointer"
					},
					"otherResponseCount": {
						"type": "integer"
					},
					"overrideDeviceRestrictions": {
						"default": false,
						"type": "boolean"
					},
					"priority": {
						"type": "string",
						"enum": [
							"LOW",
							"MEDIUM",
							"HIGH"
						]
					},
					"properties": {
						"description": "Map of property names and values",
						"type": "object"
					},
					"recipients": {
						"description": "Note: required if pre-configured recipients do not exist",
						"items": {
							"$ref": "#/components/schemas/RecipientPointer"
						},
						"type": "array"
					},
					"requestId": {
						"type": "string"
					},
					"requirePhonePassword": {
						"default": false,
						"type": "boolean"
					},
					"responseOptions": {
						"description": "A list of the response options to be displayed for the event. Response options are identified by a Universally Unique Identifier (UUID)",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ResponseOptionInput"
						}
					},
					"senderOverrides": {
						"type": "object"
					},
					"status": {
						"type": "string",
						"enum": [
							"ACTIVE",
							"SUSPENDED",
							"TERMINATED"
						]
					},
					"targetAllDevices": {
						"description": "Target all device types",
						"type": "boolean"
					},
					"targetDeviceNames": {
						"description": "Target specific device names",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/DeviceNamePointer"
						}
					},
					"voicemailOptions": {
						"description": "Voicemail Options",
						"properties": {
							"every": {
								"type": "integer"
							},
							"leave": {
								"type": "string"
							},
							"retry": {
								"type": "integer"
							}
						},
						"type": "object"
					}
				},
				"type": "object"
			},
			"EventReference": {
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string"
					},
					"eventId": {
						"description": "A legacy identifier (numeric) that represents this resource",
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"EventPointer": {
				"properties": {
					"id": {
						"description": "An identifier that represents this resource",
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"EventAnnotation": {
				"description": "An event annotation",
				"properties": {
					"id": {
						"type": "string"
					},
					"event": {
						"$ref": "#/components/schemas/EventReference"
					},
					"author": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"event",
					"author",
					"comment"
				],
				"type": "object"
			},
			"EventAnnotationInput": {
				"description": "An event annotation",
				"properties": {
					"comment": {
						"type": "string"
					}
				},
				"required": [
					"comment"
				],
				"type": "object"
			},
			"FeatureToggle": {
				"description": "Feature toggle",
				"properties": {
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"value"
				],
				"type": "object"
			},
			"FileAttachment": {
				"description": "File attachment",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"description": "File name",
						"type": "string"
					},
					"ext": {
						"description": "File extension",
						"type": "string"
					},
					"mimeType": {
						"description": "MIME type",
						"type": "string"
					},
					"size": {
						"description": "File size in bytes",
						"type": "integer"
					},
					"url": {
						"description": "File download URL",
						"type": "string"
					}
				},
				"required": [
					"id",
					"url"
				],
				"type": "object"
			},
			"Form": {
				"description": "A form",
				"properties": {
					"id": {
						"type": "string"
					},
					"formId": {
						"type": "string",
						"description": "Legacy numeric form identifier"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"mobileEnabled": {
						"type": "boolean"
					},
					"uiEnabled": {
						"type": "boolean"
					},
					"apiEnabled": {
						"type": "boolean"
					},
					"senderOverrides": {
						"type": "object"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"recipients": {
						"$ref": "#/components/schemas/Pagination_Recipient_"
					},
					"messages": {
						"$ref": "#/components/schemas/Pagination_Message_"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"status"
				],
				"type": "object"
			},
			"FormInput": {
				"description": "A form",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"mobileEnabled": {
						"type": "boolean"
					},
					"uiEnabled": {
						"type": "boolean"
					},
					"apiEnabled": {
						"type": "boolean"
					},
					"senderOverrides": {
						"type": "object"
					},
					"recipients": {
						"description": "Pre-configured recipients",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/RecipientPointer"
						}
					},
					"plan": {
						"$ref": "#/components/schemas/PlanPointer"
					}
				},
				"type": "object"
			},
			"FormPointer": {
				"description": "A reference to a form resource",
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					}
				},
				"type": "object"
			},
			"FormReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"Function": {
				"description": "Function",
				"properties": {
					"id": {
						"type": "string"
					},
					"functions": {
						"$ref": "#/components/schemas/Pagination_Permission_"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"Group": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Recipient"
					},
					{
						"description": "Groups are used for collecting users and devices and organizing them into notification schedules",
						"properties": {
							"recipientType": {
								"enum": [
									"GROUP"
								],
								"type": "string"
							},
							"allowDuplicates": {
								"type": "boolean"
							},
							"description": {
								"type": "string"
							},
							"observedByAll": {
								"type": "boolean"
							},
							"useDefaultDevices": {
								"type": "boolean"
							},
							"timezone": {
								"description": "The time zone used for calculation of day. Example: US/Pacific",
								"type": "string"
							},
							"site": {
								"$ref": "#/components/schemas/SiteReference"
							},
							"supervisors": {
								"$ref": "#/components/schemas/Pagination_Person_"
							}
						},
						"required": [
							"allowDuplicates",
							"observedByAll",
							"useDefaultDevices"
						],
						"type": "object"
					}
				]
			},
			"GroupInput": {
				"description": "Groups are used for collecting users and devices and organizing them into notification schedules",
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientInput"
					},
					{
						"properties": {
							"recipientType": {
								"enum": [
									"GROUP"
								],
								"type": "string"
							},
							"allowDuplicates": {
								"description": "Whether the group allows a notification to be sent to a device multiple times",
								"type": "boolean"
							},
							"description": {
								"type": "string"
							},
							"observedByAll": {
								"description": "Whether the group notifications are observed by all",
								"type": "boolean"
							},
							"timezone": {
								"type": "string"
							},
							"useDefaultDevices": {
								"description": "Whether the default user device should be used when sending out a notification to the group",
								"type": "boolean"
							},
							"site": {
								"$ref": "#/components/schemas/SitePointer"
							},
							"supervisors": {
								"description": "A list of group supervisors. Groups must have at least one supervisor",
								"items": {
									"$ref": "#/components/schemas/PersonPointer"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				]
			},
			"GroupMember": {
				"properties": {
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"member": {
						"$ref": "#/components/schemas/RecipientReference"
					},
					"shifts": {
						"$ref": "#/components/schemas/Pagination_Shift_"
					}
				},
				"required": [
					"group",
					"member"
				],
				"type": "object"
			},
			"GroupReference": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientReference"
					},
					{
						"properties": {
							"id": {
								"description": "The identifier of the resource",
								"type": "string"
							},
							"targetName": {
								"description": "The target name of the resource",
								"type": "string"
							},
							"recipientType": {
								"type": "string",
								"enum": [
									"GROUP"
								]
							},
							"links": {
								"$ref": "#/components/schemas/SelfLink"
							}
						},
						"required": [
							"id",
							"targetName"
						],
						"type": "object"
					}
				]
			},
			"GroupPointer": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientPointer"
					},
					{
						"properties": {
							"targetName": {
								"description": "The target name of the resource",
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"Hierarchy": {
				"description": "Hierarchy",
				"items": {
					"$ref": "#/components/schemas/HierarchyItem"
				},
				"type": "array"
			},
			"HierarchyItem": {
				"description": "Hierarchy item",
				"properties": {
					"category": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"value"
				],
				"type": "object"
			},
			"Integration": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"form": {
						"$ref": "#/components/schemas/FormReference"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"INBOUND_WEBHOOK",
							"OUTBOUND_WEBHOOK"
						]
					},
					"operation": {
						"type": "string",
						"enum": [
							"CREATE_EVENT",
							"OUTBOUND_CALLBACK",
							"RUN_SCRIPT",
							"SEND_TO_IA",
							"SEND_WEBHOOK",
							"CREATE_EVENT_SIMPLE"
						]
					},
					"triggeredBy": {
						"type": "string",
						"enum": [
							"DELIVERYSTATUS",
							"RESPONSE",
							"STATUS"
						]
					},
					"endpoint": {
						"$ref": "#/components/schemas/EndpointReference"
					},
					"authenticationType": {
						"type": "string",
						"enum": [
							"NONE",
							"URL",
							"BASIC",
							"API_KEY",
							"OAUTH"
						]
					},
					"deployed": {
						"type": "boolean",
						"default": true
					},
					"environment": {
						"type": "string",
						"enum": [
							"HOSTED",
							"ONPREMISE"
						]
					},
					"script": {
						"type": "string"
					},
					"integrationService": {
						"description": "The integration service on which an ONPREMISE integration will execute",
						"type": "string"
					},
					"integrationServiceSelector": {
						"description": "Selector for integration agents on which an ONPREMISE integration will execute",
						"type": "string"
					},
					"appendToURL": {
						"description": "Appended to the endpoint's Base URL",
						"type": "string"
					},
					"loggingLevel": {
						"type": "string",
						"enum": [
							"ERROR",
							"INFO"
						],
						"default": "ERROR"
					},
					"ownerApiKey": {
						"description": "API Key of the person who owns this integration, the creator of an integration becomes the owner",
						"type": "string"
					},
					"agents": {
						"$ref": "#/components/schemas/Pagination_Agent_"
					}
				},
				"required": [
					"id",
					"plan",
					"name",
					"type",
					"operation",
					"deployed",
					"environment"
				],
				"type": "object"
			},
			"IntegrationInput": {
				"description": "Insert or update of an integration",
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanPointer"
					},
					"form": {
						"$ref": "#/components/schemas/FormPointer"
					},
					"name": {
						"type": "string"
					},
					"type": {
						"type": "string",
						"enum": [
							"INBOUND_WEBHOOK",
							"OUTBOUND_WEBHOOK"
						]
					},
					"operation": {
						"type": "string",
						"enum": [
							"CREATE_EVENT",
							"OUTBOUND_CALLBACK",
							"RUN_SCRIPT",
							"SEND_TO_IA",
							"SEND_WEBHOOK",
							"CREATE_EVENT_SIMPLE"
						]
					},
					"triggeredBy": {
						"type": "string",
						"enum": [
							"DELIVERYSTATUS",
							"RESPONSE",
							"STATUS"
						]
					},
					"endpoint": {
						"$ref": "#/components/schemas/EndpointPointer"
					},
					"authenticationType": {
						"type": "string",
						"enum": [
							"NONE",
							"URL",
							"BASIC",
							"API_KEY",
							"OAUTH"
						]
					},
					"deployed": {
						"type": "boolean"
					},
					"environment": {
						"type": "string",
						"enum": [
							"HOSTED",
							"ONPREMISE"
						]
					},
					"script": {
						"type": "string"
					},
					"integrationService": {
						"description": "The integration service on which an ONPREMISE integration will execute",
						"type": "string"
					},
					"integrationServiceSelector": {
						"description": "Selector for integration agents on which an ONPREMISE integration will execute",
						"type": "string"
					},
					"appendToURL": {
						"description": "Appended to the endpoint's Base URL",
						"type": "string"
					},
					"loggingLevel": {
						"type": "string",
						"enum": [
							"ERROR",
							"INFO"
						]
					},
					"agents": {
						"description": "The agents on which an ONPREMISE integration will execute",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AgentPointer"
						}
					}
				},
				"type": "object"
			},
			"IntegrationReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"name": {
						"description": "The name",
						"type": "string"
					}
				},
				"required": [
					"id",
					"plan"
				],
				"type": "object"
			},
			"IntegrationPointer": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"IntegrationLog": {
				"properties": {
					"id": {
						"type": "string"
					},
					"integration": {
						"$ref": "#/components/schemas/IntegrationReference"
					},
					"completed": {
						"type": "string",
						"format": "date-time"
					},
					"requestMethod": {
						"type": "string"
					},
					"requestHeaders": {
						"type": "object"
					},
					"requestParameters": {
						"type": "object"
					},
					"requestBody": {
						"type": "string"
					},
					"remoteAddress": {
						"type": "string"
					},
					"requestId": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"COMPLETED",
							"WARNING",
							"FAILED",
							"CANCELED"
						]
					}
				},
				"required": [
					"id",
					"integration",
					"completed"
				],
				"type": "object"
			},
			"LogEntryInput": {
				"description": "Log entry",
				"properties": {
					"at": {
						"description": "Timestamp at caller",
						"type": "string",
						"format": "date-time"
					},
					"priority": {
						"description": "Logging level",
						"type": "string",
						"enum": [
							"ERROR",
							"WARN",
							"INFO",
							"DEBUG"
						]
					},
					"source": {
						"description": "Client that sent this log",
						"type": "string",
						"enum": [
							"BROWSER",
							"IOS",
							"ANDROID"
						]
					},
					"text": {
						"description": "The log line text (should be formatted appropriately to key=value pairs by the caller)",
						"type": "string",
						"maxLength": 2000
					}
				},
				"type": "object"
			},
			"Message": {
				"description": "A message",
				"discriminator": {
					"propertyName": "messageType"
				},
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"messageType": {
						"description": "The type of the message",
						"type": "string",
						"enum": [
							"SUBJECT_AND_BODY",
							"TEXT",
							"VOICE"
						]
					},
					"language": {
						"type": "string",
						"enum": [
							"ar",
							"da",
							"de",
							"el",
							"en",
							"en_GB",
							"es",
							"fi",
							"fr",
							"hi",
							"is",
							"it",
							"iw",
							"ja",
							"ko",
							"nl",
							"no",
							"pl",
							"pt",
							"pt_BR",
							"ru",
							"sk",
							"sv",
							"th",
							"vi",
							"zh_CN",
							"zh_HK"
						]
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"SubjectAndBodyMessage": {
				"description": "A subject and body message",
				"allOf": [
					{
						"$ref": "#/components/schemas/Message"
					},
					{
						"properties": {
							"messageType": {
								"type": "string",
								"enum": [
									"SUBJECT_AND_BODY"
								]
							},
							"subject": {
								"type": "string"
							},
							"body": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"TextMessage": {
				"description": "A text message",
				"allOf": [
					{
						"$ref": "#/components/schemas/Message"
					},
					{
						"properties": {
							"messageType": {
								"type": "string",
								"enum": [
									"TEXT"
								]
							},
							"text": {
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"Notification": {
				"description": "A notification",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"event": {
						"$ref": "#/components/schemas/EventReference"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientReference"
					},
					"category": {
						"type": "string"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"deliveryStatus": {
						"description": "Delivery status",
						"type": "string",
						"enum": [
							"PENDING",
							"DELIVERED",
							"RESPONDED",
							"FAILED"
						]
					},
					"message": {
						"$ref": "#/components/schemas/Message"
					},
					"responses": {
						"$ref": "#/components/schemas/Pagination_Response_"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"NotificationInput": {
				"description": "A notification",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"event": {
						"$ref": "#/components/schemas/EventPointer"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientPointer"
					},
					"category": {
						"type": "string"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"NotificationReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"NotificationPointer": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string",
						"format": "uuid"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"NotificationFilter": {
				"description": "A notification filter",
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"integration": {
						"$ref": "#/components/schemas/IntegrationReference"
					},
					"filterType": {
						"type": "string"
					},
					"config": {
						"description": "Configuration properties that will be passed to filter constructor. Stored as JSON",
						"type": "object"
					},
					"active": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"active"
				],
				"type": "object"
			},
			"NotificationFilterInput": {
				"description": "A notification filter, applied to notifications matching the specified attributes",
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanPointer"
					},
					"integration": {
						"$ref": "#/components/schemas/IntegrationPointer"
					},
					"filterType": {
						"type": "string"
					},
					"config": {
						"description": "Configuration properties that will be passed to filter constructor. Stored as JSON",
						"type": "object"
					},
					"active": {
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"OnCall": {
				"properties": {
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"shift": {
						"$ref": "#/components/schemas/ShiftReference"
					},
					"start": {
						"format": "date-time",
						"type": "string"
					},
					"end": {
						"format": "date-time",
						"type": "string"
					},
					"members": {
						"$ref": "#/components/schemas/Pagination_ShiftOccurrenceMember_"
					}
				},
				"required": [
					"group"
				],
				"type": "object"
			},
			"OnCallReminderSchedule": {
				"description": "On call reminder schedule configuration",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier (UUID) for this entity"
					},
					"person": {
						"$ref": "#/components/schemas/PersonReference"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"OnCallReminderScheduleInput": {
				"description": "On call reminder schedule configuration",
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier (UUID) for this entity"
					},
					"person": {
						"$ref": "#/components/schemas/PersonPointer"
					}
				},
				"type": "object"
			},
			"Organization": {
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier (UUID) for this entity"
					},
					"trial": {
						"type": "boolean",
						"description": "True if this is a trial organization"
					},
					"googleAnalyticsTrackingId": {
						"type": "string",
						"description": "Google Analytics tracking identifier"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"OrganizationInput": {
				"properties": {
					"trial": {
						"type": "boolean",
						"description": "True if this is a trial organization"
					},
					"googleAnalyticsTrackingId": {
						"type": "string",
						"description": "Google Analytics tracking identifier"
					}
				},
				"type": "object"
			},
			"OrganizationPointer": {
				"properties": {
					"id": {
						"type": "string",
						"description": "A unique identifier (UUID) for this entity"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"OrganizationConfig": {
				"properties": {
					"mobilePINLockEnabled": {
						"description": "Mobile app users will be required to have an account PIN",
						"type": "boolean"
					},
					"mobilePINLockTimeout": {
						"description": "Mobile PIN lock timeout in minutes",
						"type": "integer",
						"format": "int32",
						"default": 10
					},
					"passwordUniqueHistory": {
						"description": "Unique history requirement",
						"type": "integer",
						"format": "int32"
					},
					"passwordMinimumLength": {
						"description": "Minimum length",
						"type": "integer",
						"format": "int32"
					},
					"passwordRequiredComplexity": {
						"description": "Password Complexity",
						"type": "string",
						"enum": [
							"NONE",
							"NON_ALPHA",
							"STRONG"
						]
					},
					"passwordMaximumAge": {
						"description": "Expiry period in days",
						"type": "integer",
						"format": "int32"
					},
					"passwordMinimumAge": {
						"description": "Minimum password age",
						"type": "integer",
						"format": "int32"
					},
					"passwordLockoutThreshold": {
						"description": "Lock threshold",
						"type": "integer",
						"format": "int32"
					},
					"passwordLockoutDuration": {
						"description": "Lockout duration in minutes",
						"type": "integer",
						"format": "int32",
						"default": 30
					},
					"passwordLockoutResetPeriod": {
						"description": "Lockout reset in minutes",
						"type": "integer",
						"format": "int32",
						"default": 30
					}
				},
				"type": "object"
			},
			"OrganizationConfigInput": {
				"properties": {
					"mobilePINLockEnabled": {
						"description": "Mobile app users will be required to have an account PIN",
						"type": "boolean"
					},
					"mobilePINLockTimeout": {
						"description": "Mobile PIN lock timeout in minutes",
						"type": "integer",
						"format": "int32"
					},
					"passwordUniqueHistory": {
						"description": "Unique history requirement",
						"type": "integer",
						"format": "int32"
					},
					"passwordMinimumLength": {
						"description": "Minimum length",
						"type": "integer",
						"format": "int32"
					},
					"passwordRequiredComplexity": {
						"description": "Password Complexity",
						"type": "string",
						"enum": [
							"NONE",
							"NON_ALPHA",
							"STRONG"
						]
					},
					"passwordMaximumAge": {
						"description": "Expiry period in days",
						"type": "integer",
						"format": "int32"
					},
					"passwordMinimumAge": {
						"description": "Minimum password age",
						"type": "integer",
						"format": "int32"
					},
					"passwordLockoutThreshold": {
						"description": "Lock threshold",
						"type": "integer",
						"format": "int32"
					},
					"passwordLockoutDuration": {
						"description": "Lockout duration in minutes",
						"type": "integer",
						"format": "int32"
					},
					"passwordLockoutResetPeriod": {
						"description": "Lockout reset in minutes",
						"type": "integer",
						"format": "int32"
					}
				},
				"type": "object"
			},
			"Person": {
				"description": "Someone in the xMatters system who can receive notifications is called a 'Person'. Every person in the xMatters system is a user defined by a set of details, including ID number, user name, login password, and so on. deliveryStatus, notifications, and response are dynamic derived attributes and will only appear when viewing the person as an event recipient",
				"allOf": [
					{
						"$ref": "#/components/schemas/Recipient"
					},
					{
						"properties": {
							"recipientType": {
								"enum": [
									"PERSON"
								],
								"type": "string"
							},
							"firstName": {
								"description": "The first name of the user",
								"type": "string"
							},
							"language": {
								"description": "The preferred language of the user: Example: en",
								"type": "string"
							},
							"lastName": {
								"description": "The last name of the user",
								"type": "string"
							},
							"phoneLogin": {
								"description": "A numeric string that identifies users when they phone in to xMatters. This string may contain only digits and must be unique within the company",
								"type": "string"
							},
							"timezone": {
								"description": "The time zone of the user. Example:  US/Pacific",
								"type": "string"
							},
							"webLogin": {
								"description": "The ID of the user when they log on to the web user interface. This value must be unique within the company and is often identical to the targetName field",
								"type": "string"
							},
							"properties": {
								"description": "Key/Value map of custom properties",
								"type": "object"
							},
							"site": {
								"$ref": "#/components/schemas/SiteReference"
							},
							"devices": {
								"$ref": "#/components/schemas/Pagination_Device_"
							},
							"roles": {
								"$ref": "#/components/schemas/Pagination_Role_"
							},
							"deliveryStatus": {
								"description": "Delivery status. Derived from the status of all notifications to this person for this event",
								"type": "string",
								"enum": [
									"PENDING",
									"DELIVERED",
									"RESPONDED",
									"FAILED"
								]
							},
							"supervisors": {
								"$ref": "#/components/schemas/Pagination_PersonReference_"
							},
							"notifications": {
								"$ref": "#/components/schemas/Pagination_Notification_"
							},
							"response": {
								"$ref": "#/components/schemas/Response"
							}
						},
						"required": [
							"firstName",
							"lastName"
						],
						"type": "object"
					}
				]
			},
			"PersonInput": {
				"description": "Someone in the xMatters system who can receive notifications is called a 'Person'. Every person in the xMatters system is a user defined by a set of details, including ID number, user name, login password, and so on",
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientInput"
					},
					{
						"properties": {
							"recipientType": {
								"enum": [
									"PERSON"
								],
								"type": "string"
							},
							"firstName": {
								"description": "The first name of the user",
								"type": "string"
							},
							"language": {
								"description": "The preferred language of the user: Example: en",
								"type": "string"
							},
							"lastName": {
								"description": "The last name of the user",
								"type": "string"
							},
							"phoneLogin": {
								"description": "A numeric string that identifies users when they phone in to xMatters. This string may contain only digits and must be unique within the company",
								"type": "string"
							},
							"properties": {
								"description": "Key/Value map of custom properties",
								"type": "object"
							},
							"roles": {
								"description": "A list of the user's roles. Users must have at least one role",
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"site": {
								"$ref": "#/components/schemas/SitePointer"
							},
							"supervisors": {
								"description": "A list of supervisors of this users. If this value is not provided, the XXX user becomes the supervisor. To assign a user as a supervisor, the authenticating user must have the appropriate permissions",
								"items": {
									"$ref": "#/components/schemas/PersonPointer"
								},
								"type": "array"
							},
							"timezone": {
								"description": "The time zone of the user. Example:  US/Pacific",
								"type": "string"
							},
							"webLogin": {
								"description": "The ID of the user when they log on to the web user interface. This value must be unique within the company and is often identical to the targetName field",
								"type": "string"
							}
						},
						"required": [
							"firstName",
							"lastName",
							"language",
							"timezone",
							"webLogin",
							"roles"
						],
						"type": "object"
					}
				]
			},
			"PersonPointer": {
				"description": "A reference to a person resource",
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientPointer"
					},
					{
						"properties": {
							"targetName": {
								"description": "The targetName of the resource",
								"type": "string"
							},
							"key": {
								"description": "API key used to identify a person",
								"type": "string"
							}
						},
						"type": "object"
					}
				]
			},
			"PersonReference": {
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientReference"
					},
					{
						"properties": {
							"id": {
								"description": "The identifier of the resource",
								"type": "string"
							},
							"targetName": {
								"description": "The target name of the resource",
								"type": "string"
							},
							"recipientType": {
								"type": "string",
								"enum": [
									"PERSON"
								]
							},
							"firstName": {
								"description": "The first name of the user",
								"type": "string"
							},
							"lastName": {
								"description": "The last name of the user",
								"type": "string"
							},
							"links": {
								"$ref": "#/components/schemas/SelfLink"
							}
						},
						"required": [
							"id",
							"targetName",
							"firstName",
							"lastName"
						],
						"type": "object"
					}
				]
			},
			"Permissible": {
				"description": "Permissible entity (GROUP, PERSON, ROLE)",
				"properties": {
					"permissibleType": {
						"type": "string",
						"description": "Permissible entity type",
						"enum": [
							"GROUP",
							"PERSON",
							"ROLE"
						]
					},
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"person": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"role": {
						"$ref": "#/components/schemas/RoleReference"
					}
				},
				"required": [
					"permissibleType"
				],
				"type": "object"
			},
			"PermissiblePointer": {
				"description": "Permissible entity (GROUP, PERSON, ROLE)",
				"properties": {
					"permissibleType": {
						"type": "string",
						"description": "Permissible entity type",
						"enum": [
							"GROUP",
							"PERSON",
							"ROLE"
						]
					},
					"group": {
						"$ref": "#/components/schemas/GroupPointer"
					},
					"person": {
						"$ref": "#/components/schemas/PersonPointer"
					},
					"role": {
						"$ref": "#/components/schemas/RolePointer"
					}
				},
				"required": [
					"permissibleType"
				],
				"type": "object"
			},
			"Permission": {
				"description": "Permission",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"Plan": {
				"description": "A communication plan",
				"discriminator": {
					"propertyName": "planType"
				},
				"properties": {
					"id": {
						"type": "string"
					},
					"planType": {
						"type": "string",
						"enum": [
							"PLAN",
							"BUILT_IN"
						]
					},
					"builtInPlanType": {
						"type": "string",
						"description": "Built-in communication plan type",
						"enum": [
							"APP_DYNAMICS",
							"BIG_PANDA",
							"DATADOG",
							"HIPCHAT",
							"ICINGA",
							"JIRA",
							"NEW_RELIC",
							"PINGDOM",
							"SCOUT",
							"SENSU",
							"SPLUNK_ITSI",
							"SUMO_LOGIC",
							"WEBHOOK"
						]
					},
					"name": {
						"type": "string",
						"description": "User provided name for this plan"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"editable": {
						"type": "boolean"
					},
					"loggingLevel": {
						"type": "string",
						"enum": [
							"ERROR",
							"INFO"
						],
						"default": "ERROR"
					},
					"accessibleByAll": {
						"type": "boolean",
						"description": "True if all authenticated callers are permitted"
					},
					"floodControl": {
						"type": "boolean",
						"description": "True if filtering and suppression is active"
					},
					"created": {
						"type": "string",
						"format": "date-time"
					},
					"creator": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"forms": {
						"$ref": "#/components/schemas/Pagination_Form_"
					},
					"integrations": {
						"$ref": "#/components/schemas/Pagination_Integration_"
					},
					"constants": {
						"$ref": "#/components/schemas/Pagination_Constant_"
					},
					"endpoints": {
						"$ref": "#/components/schemas/Pagination_Endpoint_"
					},
					"permitted": {
						"$ref": "#/components/schemas/Pagination_Permissible_"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"name",
					"enabled"
				],
				"type": "object"
			},
			"PlanInput": {
				"description": "A communication plan",
				"discriminator": {
					"propertyName": "planType"
				},
				"properties": {
					"id": {
						"type": "string"
					},
					"planType": {
						"type": "string",
						"enum": [
							"PLAN",
							"BUILT_IN"
						]
					},
					"name": {
						"type": "string",
						"description": "User provided name for this specific plan"
					},
					"description": {
						"type": "string"
					},
					"enabled": {
						"type": "boolean"
					},
					"accessibleByAll": {
						"type": "boolean",
						"description": "True if all authenticated callers are permitted"
					},
					"floodControl": {
						"type": "boolean",
						"description": "True if filtering and suppression is active"
					},
					"constants": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ConstantInput"
						}
					},
					"creator": {
						"$ref": "#/components/schemas/PersonPointer"
					},
					"loggingLevel": {
						"type": "string",
						"enum": [
							"ERROR",
							"INFO"
						]
					},
					"permitted": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PermissiblePointer"
						}
					}
				},
				"type": "object"
			},
			"PlanReference": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"PlanPointer": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"BuiltInPlanInput": {
				"description": "Built-in communication plan",
				"discriminator": {
					"propertyName": "builtInPlanType"
				},
				"allOf": [
					{
						"$ref": "#/components/schemas/PlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"APP_DYNAMICS",
									"BIG_PANDA",
									"DATADOG",
									"HIPCHAT",
									"ICINGA",
									"JIRA",
									"NEW_RELIC",
									"PINGDOM",
									"SCOUT",
									"SENSU",
									"SPLUNK_ITSI",
									"SUMO_LOGIC",
									"WEBHOOK"
								]
							},
							"recipients": {
								"description": "Pre-configured recipients",
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/RecipientPointer"
								}
							},
							"senderOverrideName": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType"
						],
						"type": "object"
					}
				]
			},
			"AppDynamicsBuiltInPlanInput": {
				"description": "AppDynamics built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"APP_DYNAMICS"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"BigPandaBuiltInPlanInput": {
				"description": "BigPanda built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"BIG_PANDA"
								]
							},
							"bearerToken": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"bearerToken"
						],
						"type": "object"
					}
				]
			},
			"DataDogBuiltInPlanInput": {
				"description": "DataDog built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"DATADOG"
								]
							},
							"apiKey": {
								"type": "string"
							},
							"applicationKey": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"apiKey",
							"applicationKey"
						],
						"type": "object"
					}
				]
			},
			"HipChatBuiltInPlanInput": {
				"description": "HipChat built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"HIPCHAT"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"IcingaBuiltInPlanInput": {
				"description": "Icinga built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"ICINGA"
								]
							},
							"apiURL": {
								"type": "string"
							},
							"apiUsername": {
								"type": "string"
							},
							"apiPassword": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"apiURL",
							"apiUsername",
							"apiPassword"
						],
						"type": "object"
					}
				]
			},
			"JiraBuiltInPlanInput": {
				"description": "JIRA built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"JIRA"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"NewRelicBuiltInPlanInput": {
				"description": "NewRelic built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"NEW_RELIC"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"PingdomBuiltInPlanInput": {
				"description": "Pingdom built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"PINGDOM"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"ScoutBuiltInPlanInput": {
				"description": "Scout built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"SCOUT"
								]
							},
							"apiKey": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"apiKey"
						],
						"type": "object"
					}
				]
			},
			"SensuBuiltInPlanInput": {
				"description": "Scout built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"SENSU"
								]
							},
							"apiURL": {
								"type": "string"
							},
							"apiUsername": {
								"type": "string"
							},
							"apiPassword": {
								"type": "string"
							},
							"silenceDuration": {
								"type": "integer"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"apiURL",
							"apiUsername",
							"apiPassword",
							"silenceDuration"
						],
						"type": "object"
					}
				]
			},
			"SplunkITSIBuiltInPlanInput": {
				"description": "Splunk ITSI built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"SPLUNK_ITSI"
								]
							},
							"apiURL": {
								"type": "string"
							},
							"apiUsername": {
								"type": "string"
							},
							"apiPassword": {
								"type": "string"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName",
							"apiURL",
							"apiUsername",
							"apiPassword"
						],
						"type": "object"
					}
				]
			},
			"SumoLogicBuiltInPlanInput": {
				"description": "SumoLogic built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"SUMO_LOGIC"
								]
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"WebhookBuiltInPlanInput": {
				"description": "Webhook built-in communication plan",
				"allOf": [
					{
						"$ref": "#/components/schemas/BuiltInPlanInput"
					},
					{
						"properties": {
							"planType": {
								"type": "string",
								"enum": [
									"BUILT_IN"
								]
							},
							"builtInPlanType": {
								"type": "string",
								"description": "Built-in communication plan type",
								"enum": [
									"WEBHOOK"
								]
							},
							"eventStatus": {
								"type": "string",
								"format": "url"
							},
							"notificationDeliveryStatus": {
								"type": "string",
								"format": "url"
							},
							"responseStatus": {
								"type": "string",
								"format": "url"
							}
						},
						"required": [
							"planType",
							"builtInPlanType",
							"recipients",
							"senderOverrideName"
						],
						"type": "object"
					}
				]
			},
			"Endpoint": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"name": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"endpointType": {
						"type": "string",
						"enum": [
							"XMATTERS",
							"EXTERNAL",
							"XM_FORM"
						]
					},
					"authenticationType": {
						"type": "string",
						"enum": [
							"NO_AUTH",
							"BASIC",
							"OAUTH2",
							"OAUTH2_FORCE",
							"OAUTH_SLACK"
						]
					},
					"authentication": {
						"properties": {
							"username": {
								"type": "string"
							},
							"oauthClientId": {
								"type": "string"
							},
							"oauthTokenUrl": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"trustSelfSignedCertificates": {
						"type": "boolean",
						"default": false
					}
				},
				"required": [
					"id",
					"plan",
					"name",
					"url"
				],
				"type": "object"
			},
			"EndpointInput": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanPointer"
					},
					"name": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"endpointType": {
						"type": "string",
						"enum": [
							"XMATTERS",
							"EXTERNAL",
							"XM_FORM"
						]
					},
					"authenticationType": {
						"type": "string",
						"enum": [
							"NO_AUTH",
							"BASIC",
							"OAUTH2",
							"OAUTH2_FORCE",
							"OAUTH_SLACK"
						]
					},
					"authentication": {
						"properties": {
							"username": {
								"type": "string"
							},
							"password": {
								"type": "string"
							},
							"oauthClientId": {
								"type": "string"
							},
							"oauthClientSecret": {
								"type": "string"
							},
							"oauthTokenUrl": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"trustSelfSignedCertificates": {
						"type": "boolean",
						"default": false
					}
				},
				"type": "object"
			},
			"EndpointReference": {
				"properties": {
					"id": {
						"type": "string"
					},
					"plan": {
						"$ref": "#/components/schemas/PlanReference"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"plan",
					"name"
				],
				"type": "object"
			},
			"EndpointPointer": {
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"Recipient": {
				"discriminator": {
					"propertyName": "recipientType"
				},
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string",
						"format": "uuid"
					},
					"targetName": {
						"description": "An identifier such as a name that can be used to identify a resource",
						"type": "string"
					},
					"recipientType": {
						"enum": [
							"PERSON",
							"DEVICE",
							"GROUP",
							"DYNAMIC_TEAM",
							"SITE"
						],
						"type": "string"
					},
					"status": {
						"description": "Whether the recipient is active. Inactive recipients do not receive notifications",
						"type": "string",
						"enum": [
							"ACTIVE",
							"INACTIVE",
							"INVALID"
						]
					},
					"externalKey": {
						"description": "Identifies this resource in an external system. Used when externallyOwned is true",
						"type": "string"
					},
					"externallyOwned": {
						"description": "True if this resource is managed by an external system. Externally-owned resources cannot be deleted in the xMatters user interface",
						"type": "boolean"
					},
					"targeted": {
						"description": "Indicates if this is a targeted recipient. If omitted assume false",
						"type": "boolean"
					},
					"locked": {
						"description": "Lists the fields of externally-owned objects that are locked and cannot be modified in the xMatters user interface",
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"responseCount": {
						"description": "Number of responses required before xMatters stops notifying targeted group or dynamic team",
						"type": "integer",
						"minimum": 1
					}
				},
				"required": [
					"id",
					"targetName",
					"recipientType",
					"externallyOwned",
					"status"
				],
				"type": "object"
			},
			"RecipientInput": {
				"description": "A Recipient can be the target of a notification. Groups, People and Devices are all Recipients",
				"discriminator": {
					"propertyName": "recipientType"
				},
				"properties": {
					"id": {
						"description": "A unique identifier (UUID) for this entity",
						"type": "string"
					},
					"targetName": {
						"type": "string"
					},
					"recipientType": {
						"enum": [
							"GROUP",
							"PERSON",
							"DEVICE",
							"DYNAMIC_TEAM",
							"SITE"
						],
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"ACTIVE",
							"INACTIVE"
						],
						"default": "ACTIVE"
					},
					"externalKey": {
						"type": "string"
					},
					"externallyOwned": {
						"type": "boolean"
					},
					"responseCount": {
						"description": "Number of responses required before xMatters stops notifying targeted group or dynamic team",
						"type": "integer",
						"minimum": 1
					}
				},
				"required": [
					"recipientType",
					"targetName"
				],
				"type": "object"
			},
			"RecipientPointer": {
				"description": "A reference to a recipient resource",
				"properties": {
					"id": {
						"description": "The identifier of the resource. Can be either UUID or targetName",
						"type": "string"
					},
					"recipientType": {
						"type": "string",
						"enum": [
							"GROUP",
							"PERSON",
							"DEVICE",
							"SITE"
						]
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"RecipientReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"recipientType": {
						"type": "string",
						"enum": [
							"GROUP",
							"PERSON",
							"DEVICE",
							"SITE"
						]
					},
					"targetName": {
						"description": "The target name of the recipient",
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"recipientType",
					"targetName"
				],
				"type": "object"
			},
			"SelfLink": {
				"properties": {
					"self": {
						"description": "A link to this resource",
						"type": "string"
					}
				},
				"required": [
					"self"
				],
				"type": "object"
			},
			"Revision": {
				"description": "A revision",
				"discriminator": {
					"propertyName": "revisionType"
				},
				"properties": {
					"id": {
						"description": "A unique identifier (v1 UUID) for this entity",
						"type": "string",
						"format": "uuid"
					},
					"at": {
						"description": "Time this revision happened (UTC)",
						"type": "string",
						"format": "date-time"
					},
					"revisionType": {
						"description": "Revision types",
						"type": "string",
						"enum": [
							"EVENT",
							"PERSON",
							"DEVICE",
							"GROUP",
							"SITE"
						]
					},
					"revision": {
						"description": "v1 UUID that increases to indicate revision of this entity",
						"type": "string",
						"format": "uuid"
					},
					"by": {
						"$ref": "#/components/schemas/PersonReference"
					}
				},
				"required": [
					"id",
					"at",
					"revisionType"
				],
				"type": "object"
			},
			"EventRevision": {
				"description": "An event revision",
				"allOf": [
					{
						"$ref": "#/components/schemas/Revision"
					},
					{
						"properties": {
							"revisionType": {
								"type": "string",
								"enum": [
									"EVENT"
								]
							},
							"event": {
								"$ref": "#/components/schemas/Event"
							}
						},
						"required": [
							"revisionType",
							"event"
						],
						"type": "object"
					}
				]
			},
			"RefreshToken": {
				"description": "Refresh token response",
				"properties": {
					"name": {
						"type": "string"
					},
					"refresh_token": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"refresh_token"
				],
				"type": "object"
			},
			"Response": {
				"description": "A response",
				"properties": {
					"id": {
						"type": "string"
					},
					"notification": {
						"$ref": "#/components/schemas/NotificationReference"
					},
					"option": {
						"$ref": "#/components/schemas/ResponseOption"
					},
					"response": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"source": {
						"type": "string",
						"enum": [
							"BROWSER",
							"IOS",
							"ANDROID"
						]
					},
					"deviceName": {
						"type": "string"
					},
					"received": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"response",
					"received"
				],
				"type": "object"
			},
			"ResponseInput": {
				"description": "A response",
				"properties": {
					"notification": {
						"$ref": "#/components/schemas/NotificationPointer"
					},
					"response": {
						"type": "string"
					},
					"comment": {
						"type": "string"
					},
					"source": {
						"type": "string",
						"enum": [
							"BROWSER",
							"IOS",
							"ANDROID"
						]
					},
					"deviceName": {
						"type": "string"
					},
					"callMeAt": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"ResponseOption": {
				"description": "A response option",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"number": {
						"format": "int32",
						"type": "integer"
					},
					"text": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"prompt": {
						"type": "string"
					},
					"action": {
						"type": "string"
					},
					"contribution": {
						"type": "string"
					},
					"redirectUrl": {
						"type": "string"
					},
					"joinConference": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"number",
					"text",
					"description",
					"prompt"
				],
				"type": "object"
			},
			"ResponseOptionInput": {
				"description": "A response option",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid"
					},
					"number": {
						"format": "int32",
						"type": "integer"
					},
					"text": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"prompt": {
						"type": "string"
					},
					"action": {
						"type": "string"
					},
					"contribution": {
						"type": "string"
					},
					"redirectUrl": {
						"type": "string"
					},
					"joinConference": {
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"VendorResponse": {
				"description": "A vendor response",
				"properties": {
					"id": {
						"type": "string"
					},
					"notification": {
						"$ref": "#/components/schemas/NotificationReference"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTION_FAILURE",
							"PROXY_QUEUED",
							"CNS_PROVIDER_DELIVERED",
							"DEVICE_ATTEMPT_FAILURE",
							"PROVIDER_QUEUED",
							"PROVIDER_TIMEOUT",
							"VOICEMAIL_ATTEMPT_RETRY",
							"PROVIDER_DELIVERED",
							"DEVICE_DELIVERED",
							"DEVICE_READ",
							"PHONE_DELIVERY",
							"SMS_BOUNCED",
							"QUERY_FAILURE",
							"DELIVERY_FAILURE"
						]
					},
					"at": {
						"type": "string",
						"format": "date-time"
					},
					"properties": {
						"type": "object"
					}
				},
				"required": [
					"id",
					"notification",
					"status",
					"at"
				],
				"type": "object"
			},
			"VendorResponseInput": {
				"description": "A vendor response",
				"properties": {
					"notification": {
						"$ref": "#/components/schemas/NotificationPointer"
					},
					"status": {
						"type": "string",
						"enum": [
							"CONNECTION_FAILURE",
							"PROXY_QUEUED",
							"CNS_PROVIDER_DELIVERED",
							"DEVICE_ATTEMPT_FAILURE",
							"PROVIDER_QUEUED",
							"PROVIDER_TIMEOUT",
							"VOICEMAIL_ATTEMPT_RETRY",
							"PROVIDER_DELIVERED",
							"DEVICE_DELIVERED",
							"DEVICE_READ",
							"PHONE_DELIVERY",
							"SMS_BOUNCED",
							"QUERY_FAILURE",
							"DELIVERY_FAILURE"
						]
					},
					"at": {
						"type": "string",
						"format": "date-time"
					},
					"properties": {
						"type": "object"
					}
				},
				"required": [
					"notification",
					"status",
					"at"
				],
				"type": "object"
			},
			"Role": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"description": "Unique name. Also alias for targetName"
					},
					"functions": {
						"$ref": "#/components/schemas/Pagination_Function_"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"RoleReference": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"description": "Unique name. Also alias for targetName"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"RolePointer": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"description": "Unique name. Also alias for targetName"
					}
				},
				"type": "object"
			},
			"RosterMember": {
				"properties": {
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"member": {
						"$ref": "#/components/schemas/Recipient"
					}
				},
				"required": [
					"group",
					"member"
				],
				"type": "object"
			},
			"Scenario": {
				"description": "A scenario",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"name",
					"description",
					"status"
				],
				"type": "object"
			},
			"ServiceProvider": {
				"description": "A service provider",
				"properties": {
					"id": {
						"type": "string"
					},
					"deviceType": {
						"description": "The type of the device",
						"type": "string",
						"enum": [
							"ANDROID_PUSH",
							"APPLE_PUSH",
							"BLACKBERRY_PUSH",
							"BROWSER",
							"EMAIL",
							"FAX",
							"GENERIC",
							"IM",
							"NUMERIC_PAGER",
							"TEXT_PAGER",
							"TEXT_PHONE",
							"VOICE",
							"VOICE_IVR"
						]
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"ServiceProviderReference": {
				"description": "A reference to a provider resource",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"ServiceProviderPointer": {
				"description": "A pointer to a provider resource",
				"properties": {
					"id": {
						"type": "string"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"Shift": {
				"properties": {
					"id": {
						"type": "string"
					},
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"start": {
						"description": "UTC Timestamp",
						"format": "date-time",
						"type": "string"
					},
					"end": {
						"description": "UTC Timestamp",
						"format": "date-time",
						"type": "string"
					},
					"recurrence": {
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					"timezone": {
						"description": "The time zone used for calculation of day. Example: US/Pacific",
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"group",
					"name"
				],
				"type": "object"
			},
			"ShiftInput": {
				"properties": {
					"id": {
						"type": "string"
					},
					"group": {
						"$ref": "#/components/schemas/GroupPointer"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"start": {
						"format": "date-time",
						"type": "string"
					},
					"end": {
						"format": "date-time",
						"type": "string"
					},
					"recurrence": {
						"$ref": "#/components/schemas/ShiftRecurrence"
					}
				},
				"type": "object"
			},
			"ShiftReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"group": {
						"$ref": "#/components/schemas/GroupReference"
					},
					"name": {
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object"
			},
			"ShiftPointer": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"group": {
						"$ref": "#/components/schemas/GroupPointer"
					},
					"name": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"ShiftRecurrence": {
				"description": "Recurrence details for a shift",
				"discriminator": {
					"propertyName": "frequency"
				},
				"properties": {
					"frequency": {
						"type": "string",
						"enum": [
							"ONCE",
							"DAILY",
							"WEEKLY",
							"EVERY_WEEKDAY",
							"EVERY_WEEKEND_DAY",
							"MONTHLY",
							"YEARLY",
							"HOLIDAY"
						]
					}
				},
				"type": "object"
			},
			"ShiftRecurrenceEnd": {
				"description": "Recurrence end details for a shift",
				"properties": {
					"endBy": {
						"type": "string",
						"enum": [
							"NEVER",
							"DATE",
							"REPETITIONS"
						]
					},
					"date": {
						"description": "End at this date and time (UTC)",
						"format": "date-time",
						"type": "string"
					},
					"repetitions": {
						"description": "End after this many repetitions",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"OnceShiftRecurrence": {
				"description": "Recurrence details for a one time shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"ONCE"
								]
							}
						},
						"type": "object"
					}
				]
			},
			"DailyShiftRecurrence": {
				"description": "Recurrence details for a daily shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"DAILY"
								]
							},
							"repeatEvery": {
								"description": "Repeat every X days",
								"type": "integer"
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"WeeklyShiftRecurrence": {
				"description": "Recurrence details for a weekly shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"WEEKLY"
								]
							},
							"repeatEvery": {
								"description": "Repeat every X weeks",
								"type": "integer"
							},
							"onDays": {
								"description": "Repeat on these days of the week",
								"type": "array",
								"items": {
									"type": "string",
									"enum": [
										"SU",
										"MO",
										"TU",
										"WE",
										"TH",
										"FR",
										"SA"
									]
								}
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"EveryWeekdayShiftRecurrence": {
				"description": "Recurrence details for an every weekday shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"EVERY_WEEKDAY"
								]
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"EveryWeekendDayShiftRecurrence": {
				"description": "Recurrence details for an every weekend day shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"EVERY_WEEKEND_DAY"
								]
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"MonthlyShiftRecurrence": {
				"description": "Recurrence details for a monthly shift",
				"discriminator": {
					"propertyName": "on"
				},
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"MONTHLY"
								]
							},
							"on": {
								"description": "Repeat on date of month or day of week",
								"type": "string",
								"enum": [
									"DATE_OF_MONTH",
									"DAY_OF_WEEK"
								]
							},
							"months": {
								"description": "Repeat on these months",
								"type": "array",
								"items": {
									"type": "string",
									"enum": [
										"JAN",
										"FEB",
										"MAR",
										"APR",
										"MAY",
										"JUN",
										"JUL",
										"AUG",
										"SEP",
										"OCT",
										"NOV",
										"DEC"
									]
								}
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"MonthlyDateOfMonthShiftRecurrence": {
				"description": "Recurrence details for a monthly shift on a specific date of the month",
				"allOf": [
					{
						"$ref": "#/components/schemas/MonthlyShiftRecurrence"
					},
					{
						"properties": {
							"on": {
								"description": "Repeat on date of month",
								"type": "string",
								"enum": [
									"DATE_OF_MONTH"
								]
							},
							"dateOfMonth": {
								"description": "Repeat on this day of month",
								"type": "string",
								"enum": [
									"1",
									"2",
									"3",
									"4",
									"5",
									"6",
									"7",
									"8",
									"9",
									"10",
									"11",
									"12",
									"13",
									"14",
									"15",
									"16",
									"17",
									"18",
									"19",
									"20",
									"21",
									"22",
									"23",
									"24",
									"25",
									"26",
									"27",
									"28",
									"29",
									"30",
									"31",
									"LAST"
								]
							}
						},
						"type": "object"
					}
				]
			},
			"MonthlyDayOfWeekShiftRecurrence": {
				"description": "Recurrence details for a monthly shift on a specific day of the week",
				"allOf": [
					{
						"$ref": "#/components/schemas/MonthlyShiftRecurrence"
					},
					{
						"properties": {
							"on": {
								"description": "Repeat on day of week",
								"type": "string",
								"enum": [
									"DAY_OF_WEEK"
								]
							},
							"dayOfWeekClassifier": {
								"description": "Classifier for day of the week within a month",
								"type": "string",
								"enum": [
									"FIRST",
									"SECOND",
									"THIRD",
									"FOURTH",
									"LAST"
								]
							},
							"dayOfWeek": {
								"description": "Day of the week",
								"type": "string",
								"enum": [
									"SU",
									"MO",
									"TU",
									"WE",
									"TH",
									"FR",
									"SA"
								]
							}
						},
						"type": "object"
					}
				]
			},
			"YearlyShiftRecurrence": {
				"description": "Recurrence details for a one time shift",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"YEARLY"
								]
							},
							"end": {
								"$ref": "#/components/schemas/ShiftRecurrenceEnd"
							}
						},
						"type": "object"
					}
				]
			},
			"HolidayShiftRecurrence": {
				"description": "Recurrence details for a holiday",
				"allOf": [
					{
						"$ref": "#/components/schemas/ShiftRecurrence"
					},
					{
						"properties": {
							"frequency": {
								"description": "Repeat at this frequency",
								"type": "string",
								"enum": [
									"HOLIDAY"
								]
							},
							"end": {
								"description": "Recurrence end details for a shift",
								"properties": {
									"endBy": {
										"type": "string",
										"enum": [
											"NEVER",
											"DATE"
										]
									},
									"date": {
										"description": "End at this date and time (UTC)",
										"format": "date-time",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				]
			},
			"ShiftMember": {
				"properties": {
					"delay": {
						"description": "How long, in minutes, to wait before notifying this shift member",
						"type": "integer"
					},
					"escalationType": {
						"description": "Identifies the type of escalation to use for Performance Report metrics; can be one of None, Peer, or Management. Note that if the delay is set to 0, this field must be set to None, or omitted. This setting cannot be applied to the first recipient in a list",
						"enum": [
							"NONE",
							"PEER",
							"MANAGEMENT"
						],
						"type": "string"
					},
					"inRotation": {
						"description": "Indicates whether the team member is included in the rotation cycle",
						"type": "boolean"
					},
					"position": {
						"description": "Position in the rotation sequence",
						"type": "integer"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientReference"
					},
					"shift": {
						"$ref": "#/components/schemas/ShiftReference"
					}
				},
				"required": [
					"shift",
					"recipient",
					"position",
					"delay",
					"escalationType",
					"inRotation"
				],
				"type": "object"
			},
			"ShiftMemberInput": {
				"properties": {
					"delay": {
						"description": "How long, in minutes, to wait before notifying this team member",
						"type": "integer"
					},
					"escalationType": {
						"description": "Identifies the type of escalation to use for Performance Report metrics; can be one of None, Peer, or Management. Note that if the delay is set to 0, this field must be set to None, or omitted. This setting cannot be applied to the first recipient in a list",
						"enum": [
							"NONE",
							"PEER",
							"MANAGEMENT"
						],
						"type": "string"
					},
					"inRotation": {
						"description": "Indicates whether the team member is included in the rotation cycle",
						"type": "boolean"
					},
					"position": {
						"description": "Position in the rotation sequence",
						"type": "integer"
					},
					"recipient": {
						"$ref": "#/components/schemas/RecipientPointer"
					}
				},
				"required": [
					"recipient"
				],
				"type": "object"
			},
			"ShiftOccurrence": {
				"properties": {
					"shift": {
						"$ref": "#/components/schemas/ShiftReference"
					},
					"start": {
						"format": "date-time",
						"type": "string"
					},
					"end": {
						"format": "date-time",
						"type": "string"
					},
					"members": {
						"$ref": "#/components/schemas/Pagination_ShiftOccurrenceMember_"
					}
				},
				"required": [
					"shift",
					"start",
					"end"
				],
				"type": "object"
			},
			"ShiftOccurrenceMember": {
				"properties": {
					"delay": {
						"type": "integer",
						"description": "How long, in minutes, to wait before notifying this shift member"
					},
					"member": {
						"$ref": "#/components/schemas/Recipient"
					},
					"position": {
						"type": "integer",
						"description": "Position in the escalation order"
					},
					"escalationType": {
						"description": "Identifies the type of escalation to use for Performance Report metrics. Note that if the delay is set to 0, this field must be set to NONE, or omitted. This setting cannot be applied to the first recipient in a list",
						"enum": [
							"NONE",
							"PEER",
							"MANAGEMENT"
						],
						"type": "string"
					},
					"replacements": {
						"$ref": "#/components/schemas/Pagination_TemporaryReplacement_"
					}
				},
				"required": [
					"member",
					"position",
					"delay"
				],
				"type": "object"
			},
			"Site": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Recipient"
					},
					{
						"description": "Site a group belongs to",
						"properties": {
							"name": {
								"type": "string"
							},
							"address1": {
								"type": "string"
							},
							"address2": {
								"type": "string"
							},
							"city": {
								"type": "string"
							},
							"country": {
								"type": "string"
							},
							"language": {
								"type": "string"
							},
							"latitude": {
								"format": "double",
								"type": "number"
							},
							"longitude": {
								"format": "double",
								"type": "number"
							},
							"postalCode": {
								"type": "string"
							},
							"state": {
								"type": "string"
							},
							"timezone": {
								"type": "string"
							},
							"links": {
								"$ref": "#/components/schemas/SelfLink"
							}
						},
						"required": [
							"id",
							"name"
						],
						"type": "object"
					}
				]
			},
			"SitePointer": {
				"description": "Site a group belongs to",
				"allOf": [
					{
						"$ref": "#/components/schemas/RecipientPointer"
					}
				]
			},
			"SiteReference": {
				"properties": {
					"id": {
						"description": "The identifier of the resource",
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"links": {
						"$ref": "#/components/schemas/SelfLink"
					}
				},
				"required": [
					"id"
				],
				"type": "object"
			},
			"TemporaryReplacement": {
				"description": "object",
				"properties": {
					"start": {
						"format": "date-time",
						"type": "string"
					},
					"end": {
						"format": "date-time",
						"type": "string"
					},
					"member": {
						"$ref": "#/components/schemas/PersonReference"
					},
					"replacement": {
						"$ref": "#/components/schemas/PersonReference"
					}
				},
				"required": [
					"start",
					"end",
					"replacement"
				],
				"type": "object"
			},
			"PaginationLinks": {
				"properties": {
					"next": {
						"description": "A link to the next page of results",
						"type": "string"
					},
					"previous": {
						"description": "A link to the previous page of results",
						"type": "string"
					},
					"self": {
						"description": "A link to this page of results",
						"type": "string"
					}
				},
				"required": [
					"self"
				],
				"type": "object"
			},
			"BadRequestResponse": {
				"properties": {
					"code": {
						"description": "An application-specific error code",
						"format": "int32",
						"type": "integer"
					},
					"message": {
						"description": "A detailed description of the response or error",
						"type": "string"
					},
					"reason": {
						"description": "A description of the response code",
						"enum": [
							"Bad Request"
						],
						"type": "string"
					},
					"status": {
						"description": "The HTTP status code",
						"enum": [
							400
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"status",
					"reason",
					"message"
				],
				"type": "object"
			},
			"UnauthorizedResponse": {
				"properties": {
					"code": {
						"description": "An application-specific error code",
						"format": "int32",
						"type": "integer"
					},
					"message": {
						"description": "A detailed description of the response or error",
						"type": "string"
					},
					"reason": {
						"description": "A description of the response code",
						"enum": [
							"Unauthorized"
						],
						"type": "string"
					},
					"status": {
						"description": "The HTTP status code",
						"enum": [
							401
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"status",
					"reason",
					"message"
				],
				"type": "object"
			},
			"ForbiddenResponse": {
				"properties": {
					"code": {
						"description": "An application-specific error code",
						"format": "int32",
						"type": "integer"
					},
					"message": {
						"description": "A detailed description of the response or error",
						"type": "string"
					},
					"reason": {
						"description": "A description of the response code",
						"enum": [
							"Forbidden"
						],
						"type": "string"
					},
					"status": {
						"description": "The HTTP status code",
						"enum": [
							403
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"status",
					"reason",
					"message"
				],
				"type": "object"
			},
			"NotFoundResponse": {
				"properties": {
					"code": {
						"description": "An application-specific error code",
						"format": "int32",
						"type": "integer"
					},
					"message": {
						"description": "A detailed description of the response or error",
						"type": "string"
					},
					"reason": {
						"description": "A description of the response code",
						"enum": [
							"Not Found"
						],
						"type": "string"
					},
					"status": {
						"description": "The HTTP status code",
						"enum": [
							404
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"status",
					"reason",
					"message"
				],
				"type": "object"
			},
			"ConflictResponse": {
				"properties": {
					"code": {
						"description": "An application-specific error code",
						"format": "int32",
						"type": "integer"
					},
					"message": {
						"description": "A detailed description of the response or error",
						"type": "string"
					},
					"reason": {
						"description": "A description of the response status",
						"enum": [
							"Conflict"
						],
						"type": "string"
					},
					"status": {
						"description": "The HTTP status code",
						"enum": [
							409
						],
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"status",
					"reason",
					"message"
				],
				"type": "object"
			},
			"Pagination_Agent_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Agent"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_AgentMonitor_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/AgentMonitor"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_AgentOwner_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/AgentOwner"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Audit_": {
				"properties": {
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Audit"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"required": [
					"data",
					"links"
				],
				"type": "object"
			},
			"Pagination_APIKey_": {
				"properties": {
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/APIKey"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"required": [
					"data",
					"links"
				],
				"type": "object"
			},
			"Pagination_Country_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Country"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_DeepLink_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/DeepLink"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Device_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Device"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_DeviceName_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/DeviceName"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_DeviceTimeframe_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/DeviceTimeframe"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_DeviceType_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"type": "array",
						"items": {
							"description": "The type of the device",
							"type": "string",
							"enum": [
								"ANDROID_PUSH",
								"APPLE_PUSH",
								"BLACKBERRY_PUSH",
								"BROWSER",
								"EMAIL",
								"FAX",
								"GENERIC",
								"IM",
								"NUMERIC_PAGER",
								"TEXT_PAGER",
								"TEXT_PHONE",
								"VOICE",
								"VOICE_IVR"
							]
						}
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Event_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Event"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_EventAnnotation_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/EventAnnotation"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_FeatureToggle_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/FeatureToggle"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_FileAttachment_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/FileAttachment"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Form_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Form"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Function_": {
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"properties": {
					"count": {
						"type": "integer",
						"format": "int32",
						"description": "The number of items in this page of results (the number of items in the data array)"
					},
					"data": {
						"type": "array",
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Function"
						}
					},
					"total": {
						"type": "integer",
						"format": "int32",
						"description": "The total number of items in the result set"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"type": "object"
			},
			"Pagination_Group_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Group"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_GroupMember_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/GroupMember"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_IntegrationAgent_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/IntegrationAgent"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Notification_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Notification"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_NotificationFilter_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/NotificationFilter"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_OnCall_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/OnCall"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Permissible_": {
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"properties": {
					"count": {
						"type": "integer",
						"format": "int32",
						"description": "The number of items in this page of results (the number of items in the data array)"
					},
					"data": {
						"type": "array",
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Permissible"
						}
					},
					"total": {
						"type": "integer",
						"format": "int32",
						"description": "The total number of items in the result set"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"type": "object"
			},
			"Pagination_Permission_": {
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"properties": {
					"count": {
						"type": "integer",
						"format": "int32",
						"description": "The number of items in this page of results (the number of items in the data array)"
					},
					"data": {
						"type": "array",
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Permission"
						}
					},
					"total": {
						"type": "integer",
						"format": "int32",
						"description": "The total number of items in the result set"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"type": "object"
			},
			"Pagination_Person_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Person"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_PersonReference_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/PersonReference"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Plan_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Plan"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Conference_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Conference"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ConferenceParticipant_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ConferenceParticipant"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Constant_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Constant"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Endpoint_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Endpoint"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Integration_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"total": {
						"description": "The total number of items in the result set",
						"type": "integer",
						"format": "int32"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Integration"
						}
					}
				},
				"required": [
					"count",
					"total",
					"data"
				],
				"type": "object"
			},
			"Pagination_IntegrationLog_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"total": {
						"description": "The total number of items in the result set",
						"type": "integer",
						"format": "int32"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/IntegrationLog"
						}
					}
				},
				"required": [
					"count",
					"total",
					"data"
				],
				"type": "object"
			},
			"Pagination_IntegrationService_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"total": {
						"description": "The total number of items in the result set",
						"type": "integer",
						"format": "int32"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/IntegrationService"
						}
					}
				},
				"required": [
					"count",
					"total",
					"data"
				],
				"type": "object"
			},
			"Pagination_Recipient_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Recipient"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_RefreshToken_": {
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"properties": {
					"count": {
						"type": "integer",
						"format": "int32",
						"description": "The number of items in this page of results (the number of items in the data array)"
					},
					"data": {
						"type": "array",
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/RefreshToken"
						}
					},
					"total": {
						"type": "integer",
						"format": "int32",
						"description": "The total number of items in the result set"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					}
				},
				"type": "object"
			},
			"Pagination_Response_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Response"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ResponseOption_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ResponseOption"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Role_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Role"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_RosterMember_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/RosterMember"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Scenario_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Scenario"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ServiceProvider_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ServiceProvider"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Shift_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Shift"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ShiftMember_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ShiftMember"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ShiftOccurrence_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ShiftOccurrence"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_ShiftOccurrenceMember_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/ShiftOccurrenceMember"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_TemporaryReplacement_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/TemporaryReplacement"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			},
			"Pagination_Message_": {
				"properties": {
					"count": {
						"description": "The number of items in this page of results (the number of items in the data array)",
						"format": "int32",
						"type": "integer"
					},
					"data": {
						"description": "An array that contains this page of resources",
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array"
					},
					"links": {
						"$ref": "#/components/schemas/PaginationLinks"
					},
					"total": {
						"description": "The total number of items in the result set",
						"format": "int32",
						"type": "integer"
					}
				},
				"required": [
					"count",
					"data",
					"total",
					"links"
				],
				"type": "object"
			}
		},
		"responses": {
			"204": {
				"description": "No Content"
			},
			"400": {
				"description": "Bad Request - The request is malformed",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/BadRequestResponse"
						}
					}
				}
			},
			"401": {
				"description": "Unauthorized - The caller cannot be identified",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/UnauthorizedResponse"
						}
					}
				}
			},
			"403": {
				"description": "Forbidden - The authenticated user does not have permission to perform this action",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ForbiddenResponse"
						}
					}
				}
			},
			"404": {
				"description": "Not Found - The requested resource does not exist",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/NotFoundResponse"
						}
					}
				}
			},
			"409": {
				"description": "Conflict - The action cannot be performed in the system",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ConflictResponse"
						}
					}
				}
			}
		},
		"parameters": {
			"path-agentId": {
				"description": "Agent ID",
				"in": "path",
				"name": "agentId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-annotationId": {
				"description": "Annotation identifier",
				"in": "path",
				"name": "annotationId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-conferenceId": {
				"description": "Conference identifier",
				"in": "path",
				"name": "conferenceId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-constantId": {
				"description": "Constant identifier",
				"in": "path",
				"name": "constantId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-deepLinkToken": {
				"description": "Deep link token",
				"in": "path",
				"name": "deepLinkToken",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-deviceId": {
				"description": "The device uuid or targetName",
				"in": "path",
				"name": "deviceId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-eventId": {
				"description": "The event id",
				"in": "path",
				"name": "eventId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-endpointId": {
				"description": "The endpoint name",
				"in": "path",
				"name": "endpointId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-formId": {
				"description": "The form uuid or name",
				"in": "path",
				"name": "formId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-groupId": {
				"in": "path",
				"name": "groupId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-integrationId": {
				"description": "Integration identifier",
				"in": "path",
				"name": "integrationId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-logId": {
				"description": "Log identifier",
				"in": "path",
				"name": "logId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-memberId": {
				"description": "The recipient's uuid or targetName",
				"in": "path",
				"name": "memberId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-monitorId": {
				"description": "The monitor's uuid or targetName",
				"in": "path",
				"name": "monitorId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-notificationFilterId": {
				"description": "The notification filter identifier",
				"in": "path",
				"name": "notificationFilterId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-personId": {
				"description": "The person's uuid or targetName",
				"in": "path",
				"name": "personId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-passwordRuleId": {
				"description": "The password rule uuid",
				"in": "path",
				"name": "passwordRuleId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-planId": {
				"description": "The plan uuid or name",
				"in": "path",
				"name": "planId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-roleId": {
				"description": "The uuid or name of the role",
				"in": "path",
				"name": "roleId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-shiftId": {
				"description": "The uuid or name of the shift. e.g. 24/7 (Must be URL encoded)",
				"in": "path",
				"name": "shiftId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-occurrenceId": {
				"description": "The uuid, or start time, or sequence number of the shift occurrence",
				"in": "path",
				"name": "occurrenceId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-siteId": {
				"description": "The site uuid or name",
				"in": "path",
				"name": "siteId",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-tokenId": {
				"name": "tokenId",
				"in": "path",
				"description": "Token name",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"path-versionId": {
				"name": "versionId",
				"in": "path",
				"description": "Version (use 'latest' for latest version)",
				"required": true,
				"schema": {
					"type": "string"
				}
			},
			"query-auditType": {
				"description": "Audit type",
				"in": "query",
				"name": "auditType",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"EVENT_ANNOTATED",
						"EVENT_COMPLETED",
						"EVENT_CREATED",
						"EVENT_RESUMED",
						"EVENT_SUSPENDED",
						"EVENT_TERMINATED",
						"NOTIFICATION_DELAYED",
						"NOTIFICATION_DELIVERED",
						"NOTIFICATION_DISCARDED",
						"NOTIFICATION_ESCALATED",
						"NOTIFICATION_FAILED",
						"NOTIFICATION_SUPPRESSED",
						"RESPONSE_RECEIVED"
					]
				}
			},
			"query-after": {
				"description": "After this time or sequenced item identifier (exclusive)",
				"in": "query",
				"name": "after",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-at": {
				"description": "At this time",
				"in": "query",
				"name": "at",
				"required": false,
				"schema": {
					"type": "string",
					"format": "date-time"
				}
			},
			"query-before": {
				"description": "Before this time or sequenced item identifier (exclusive)",
				"in": "query",
				"name": "before",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-builtInPlanType": {
				"description": "The built in plan type",
				"in": "query",
				"name": "builtInPlanType",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"SUMO_LOGIC",
						"DATADOG",
						"NEW_RELIC",
						"PINGDOM",
						"HIPCHAT",
						"JIRA",
						"WEBHOOK",
						"APP_DYNAMICS",
						"SENSU"
					]
				}
			},
			"query-conferenceId": {
				"description": "Conference identifiers",
				"in": "query",
				"name": "conferenceId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-deviceId": {
				"description": "The device uuid or name",
				"in": "query",
				"name": "deviceId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-deviceType": {
				"description": "Device type",
				"in": "query",
				"name": "deviceType",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"ANDROID_PUSH",
						"APPLE_PUSH",
						"BLACKBERRY_PUSH",
						"BROWSER",
						"EMAIL",
						"FAX",
						"GENERIC",
						"IM",
						"NUMERIC_PAGER",
						"TEXT_PAGER",
						"TEXT_PHONE",
						"VOICE",
						"VOICE_IVR"
					]
				}
			},
			"query-deviceName": {
				"description": "Device name",
				"in": "query",
				"name": "deviceName",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-embed": {
				"description": "List of linked domain entities to embed in the response",
				"in": "query",
				"name": "embed",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-eventId": {
				"description": "Event id",
				"in": "query",
				"name": "eventId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-exclude": {
				"description": "Exclude these default attributes",
				"in": "query",
				"name": "exclude",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-formId": {
				"description": "The form uuid or name",
				"in": "query",
				"name": "formId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-from": {
				"description": "After this time or sequenced item identifier (inclusive)",
				"in": "query",
				"name": "from",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-groups": {
				"description": "Comma separated list of group uuid or targetName",
				"in": "query",
				"name": "groups",
				"required": false,
				"style": "form",
				"schema": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"query-include": {
				"description": "Include these optional attributes",
				"in": "query",
				"name": "include",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-integrationId": {
				"description": "The integration id",
				"in": "query",
				"name": "integrationId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-incidentId": {
				"description": "Incident id",
				"in": "query",
				"name": "incidentId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-limit": {
				"description": "Maximum result size to return",
				"in": "query",
				"name": "limit",
				"required": false,
				"schema": {
					"type": "integer",
					"maximum": 1000,
					"default": 100
				}
			},
			"query-offset": {
				"description": "Skip this many results before returning the result set",
				"in": "query",
				"name": "offset",
				"required": false,
				"schema": {
					"type": "integer",
					"default": 0
				}
			},
			"query-personId": {
				"description": "The person's uuid or targetName",
				"in": "query",
				"name": "personId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-phoneNumberFormat": {
				"description": "Modify the format of the returned phoneNumber",
				"in": "query",
				"name": "phoneNumberFormat",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"E164",
						"RAW",
						"COUNTRY_CODE",
						"CALLER_LOCALE"
					],
					"default": "E164"
				}
			},
			"query-planId": {
				"description": "The plan uuid or name",
				"in": "query",
				"name": "planId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-planType": {
				"description": "The plan type",
				"in": "query",
				"name": "planType",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"PLAN",
						"BUILT_IN"
					]
				}
			},
			"query-requestId": {
				"description": "Request identifier",
				"in": "query",
				"name": "requestId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-shiftId": {
				"description": "Shift identifier",
				"in": "query",
				"name": "shiftId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-sortOrder": {
				"description": "The sort order of results",
				"in": "query",
				"name": "sortOrder",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"ASCENDING",
						"DESCENDING"
					]
				}
			},
			"query-submitterId": {
				"description": "The id or targetName of the submitter",
				"in": "query",
				"name": "submitterId",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-to": {
				"description": "Before this time or sequenced item identifier (inclusive)",
				"in": "query",
				"name": "to",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-used": {
				"description": "is used",
				"in": "query",
				"name": "used",
				"required": false,
				"schema": {
					"type": "boolean"
				}
			},
			"query-personIdMatch": {
				"description": "Determines the attribute used to match the personId",
				"in": "query",
				"name": "personIdMatch",
				"required": false,
				"schema": {
					"type": "string",
					"enum": [
						"id",
						"targetName",
						"webLogin"
					]
				}
			},
			"query-propertyName": {
				"description": "Embedded property name",
				"in": "query",
				"name": "propertyName",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-propertyValue": {
				"description": "Embedded property value",
				"in": "query",
				"name": "propertyValue",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-role": {
				"description": "Has role",
				"in": "query",
				"name": "role",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"query-webLogin": {
				"description": "Has webLogin",
				"in": "query",
				"name": "webLogin",
				"required": false,
				"schema": {
					"type": "string"
				}
			}
		},
		"requestBodies": {
			"EventInput": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/EventInput"
						}
					}
				},
				"required": true
			}
		}
	}
}