{
	"swagger": "2.0",
	"info": {
		"title": "xM API",
		"description": "The xM API",
		"version": "0.1.0"
	},
	"host": "api.xmatters.com",
	"basePath": "/api/xm/1",
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/devices": {
			"post": {
				"tags": [
					"Devices"
				],
				"summary": "Add or update a device",
				"description": "Add or update a device",
				"operationId": "postDevice",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DevicePost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/devices/{deviceId}": {
			"get": {
				"tags": [
					"Devices"
				],
				"summary": "Retrieve device information",
				"description": "Retrieve device information",
				"operationId": "getDevice",
				"parameters": [
					{
						"$ref": "#/parameters/deviceId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AnyDevice"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"delete": {
				"tags": [
					"Devices"
				],
				"summary": "Remove a device",
				"description": "Remove a device",
				"operationId": "deleteDevice",
				"parameters": [
					{
						"$ref": "#/parameters/deviceId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AnyDevice"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/events": {
			"get": {
				"tags": [
					"Events"
				],
				"summary": "Find events",
				"description": "Find events",
				"operationId": "getEvents",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where event start time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where event start time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "priority",
						"in": "query",
						"description": "Where priority is at or above this level",
						"required": false,
						"type": "string",
						"enum": ["LOW", "MEDIUM", "HIGH"]
					},
					{
						"name": "status",
						"in": "query",
						"description": "Where status matches the provided value",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Events"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					}
				}
			},
			"post": {
				"tags": [
					"Events"
				],
				"summary": "Update an existing event",
				"description": "Update an existing event",
				"operationId": "postEvent",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EventPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/events/{eventId}": {
			"get": {
				"tags": [
					"Events"
				],
				"summary": "Retrieve event information",
				"description": "Retrieve event information",
				"operationId": "getEvent",
				"parameters": [
					{
						"$ref": "#/parameters/eventId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/triggers": {
			"post": {
				"tags": [
					"Forms"
				],
				"summary": "Submit a form trigger",
				"description": "Submit a form trigger (intiates an event)",
				"operationId": "postTrigger",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TriggerPost"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Trigger"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups": {
			"post": {
				"tags": [
					"Groups"
				],
				"summary": "Add or update a group",
				"description": "Add or update a group",
				"operationId": "postGroup",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GroupPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}": {
			"get": {
				"tags": [
					"Groups"
				],
				"summary": "Retrieve group information",
				"description": "Retrieve group information",
				"operationId": "getGroup",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"delete": {
				"tags": [
					"Groups"
				],
				"summary": "Remove a group",
				"description": "Remove a group",
				"operationId": "deleteGroup",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}/members": {
			"get": {
				"tags": [
					"Group Members"
				],
				"summary": "List group members",
				"description": "List group members",
				"operationId": "getGroupMembers",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipients"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"post": {
				"tags": [
					"Group Members"
				],
				"summary": "Add group members",
				"description": "Add group members",
				"operationId": "postGroupMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecipientReference"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}/members/{memberId}": {
			"delete": {
				"tags": [
					"Group Members"
				],
				"summary": "Remove group member",
				"description": "Remove group member",
				"operationId": "deleteGroupMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/memberId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/groups/{groupId}/shifts": {
			"get": {
				"tags": [
					"Shifts"
				],
				"summary": "List shifts",
				"description": "List shifts",
				"operationId": "getShifts",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shifts"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"post": {
				"tags": [
					"Shifts"
				],
				"summary": "Add or update a shift",
				"description": "Add or update a shift",
				"operationId": "postShift",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ShiftPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}": {
			"get": {
				"tags": [
					"Shifts"
				],
				"summary": "Retrieve shift information",
				"description": "Retrieve shift information",
				"operationId": "getShift",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"delete": {
				"tags": [
					"Shifts"
				],
				"summary": "Remove a shift",
				"description": "Remove a shift",
				"operationId": "deleteShift",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "shiftId",
						"in": "path",
						"description": "The id or name of the shift. e.g. 24/7. Must be URL encoded.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/members": {
			"get": {
				"tags": [
					"Shift Members"
				],
				"summary": "List shift members",
				"description": "List shift members",
				"operationId": "getShiftMembers",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipients"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"post": {
				"tags": [
					"Shift Members"
				],
				"summary": "Add shift members",
				"description": "Add shift members",
				"operationId": "postShiftMember",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "shiftId",
						"in": "path",
						"description": "The id or name of the shift. e.g. 24/7. Must be URL encoded.",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecipientReference"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/members/{memberId}": {
			"delete": {
				"tags": [
					"Shift Members"
				],
				"summary": "Remove shift member",
				"description": "Remove shift member",
				"operationId": "deleteShiftMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"$ref": "#/parameters/memberId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/info": {
			"get": {
				"tags": [
					"Info"
				],
				"summary": "Retrieve API information",
				"description": "Retrieve API information",
				"operationId": "getInfo",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Info"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					}
				}
			}
		},
		"/integration-functions/{functionId}": {
			"get": {
				"tags": [
					"Integration"
				],
				"summary": "Retrieve an integration function",
				"description": "Retrieve an integration function",
				"operationId": "getIntegrationFunction",
				"parameters": [
					{
						"$ref": "#/parameters/functionId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/IntegrationFunction"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/integration-functions/{functionId}/invocations": {
			"post": {
				"tags": [
					"Integration"
				],
				"summary": "Add integration function invocation",
				"description": "Add integration function invocation",
				"operationId": "postIntegrationFunctionInvocation",
				"parameters": [
					{
						"$ref": "#/parameters/functionId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/IntegrationFunctionInvocation"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/integration-scripts/{scriptId}": {
			"get": {
				"tags": [
					"Integration"
				],
				"summary": "Retrieve integration script",
				"description": "Retrieve integration script",
				"operationId": "getIntegrationScript",
				"parameters": [
					{
						"$ref": "#/parameters/scriptId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/IntegrationScript"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/notifications": {
			"post": {
				"tags": [
					"Notifications"
				],
				"summary": "Send a notification",
				"description": "Send a notification",
				"operationId": "postNotification",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationPost"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Notification"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			},
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Find notifications",
				"description": "Find notifications",
				"operationId": "getNotifications",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where notification created time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where notification created time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "priority",
						"in": "query",
						"description": "Where priority is at or above this level",
						"required": false,
						"type": "string",
						"enum": ["LOW", "MEDIUM", "HIGH"]
					},
					{
						"name": "status",
						"in": "query",
						"description": "Where status matches the provided value",
						"required": false,
						"type": "string"
					},
					{
						"name": "event",
						"in": "query",
						"description": "Filter by event",
						"required": false,
						"type": "string"
					},
					{
						"name": "recipient",
						"in": "query",
						"description": "Filter by recipient",
						"required": false,
						"type": "string"
					},
					{
						"name": "sender",
						"in": "query",
						"description": "Filter by sender",
						"required": false,
						"type": "string"
					},
					{
						"name": "incident",
						"in": "query",
						"description": "Filter by incident",
						"required": false,
						"type": "string"
					},
					{
						"name": "domain",
						"in": "query",
						"description": "Filter by domain",
						"required": false,
						"type": "string"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Notifications"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					}
				}
			}
		},
		"/notifications/{notificationId}": {
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Retrieve notification information",
				"description": "Retrieve notification information",
				"operationId": "getNotification",
				"parameters": [
					{
						"$ref": "#/parameters/notificationId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Notification"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/people": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Find people",
				"description": "Find people",
				"operationId": "getPeople",
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"description": "Case insensitive substring match within firstName, lastName, targetName. Search terms may be separated by spaces, results are returned that match ANY of the search terms.",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "ACTIVE or INACTIVE",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/People"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					}
				}
			},
			"post": {
				"tags": [
					"People"
				],
				"summary": "Add or update a person",
				"description": "Add or update a person",
				"operationId": "postPerson",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PersonPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/people/{personId}": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Retrieve person information",
				"description": "Retrieve person information",
				"operationId": "getPerson",
				"parameters": [
					{
						"$ref": "#/parameters/personId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			},
			"delete": {
				"tags": [
					"People"
				],
				"summary": "Remove a person",
				"description": "Remove a person",
				"operationId": "deletePerson",
				"parameters": [
					{
						"name": "personId",
						"in": "path",
						"description": "The person's uuid or targetName",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"204": {
						"$ref": "#/responses/204"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					}
				}
			}
		},
		"/people/{personId}/devices": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Retrieve a person's devices",
				"description": "Retrieve a person's devices",
				"operationId": "getPersonDevices",
				"parameters": [
					{
						"$ref": "#/parameters/personId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Devices"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/revisions": {
			"get": {
				"tags": [
					"Revisions"
				],
				"summary": "Find revisions",
				"description": "Find revisions",
				"operationId": "getRevisions",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where revision time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where revision time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "userId",
						"in": "query",
						"description": "User who made the revision",
						"required": false,
						"type": "string"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Revisions"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					}
				}
			}
		},
		"/revisions/{revisionId}": {
			"get": {
				"tags": [
					"Revisions"
				],
				"summary": "Retrieve revision information",
				"description": "Retrieve revision information",
				"operationId": "getRevision",
				"parameters": [
					{
						"$ref": "#/parameters/revisionId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Revision"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/sites/{siteId}": {
			"get": {
				"tags": [
					"Sites"
				],
				"summary": "Retrieve site information",
				"description": "Retrieve site information",
				"operationId": "getSite",
				"parameters": [
					{
						"$ref": "#/parameters/siteId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Site"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		},
		"/users/{userId}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Retrieve user information",
				"description": "Retrieve user information",
				"operationId": "getUser",
				"parameters": [
					{
						"$ref": "#/parameters/userId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					}
				}
			}
		}
	},
	"definitions": {
		"Callback": {
			"description": "Subscribe to receive callbacks when specific system events occur",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"on": {
					"description": "Receive callbacks only for these system events",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemEventType"
					}
				},
				"request": {
					"$ref": "#/definitions/Request"
				},
				"queue": {
					"description": "Store callbacks in a queue. Used when a customer cannot receive callbacks but can poll xMatters systems to retrieve them.",
					"type": "boolean"
				},
				"script": {
					"description": "Integration script to execute when this callback fires",
					"type": "string"
				}
			},
			"required": [
				"id",
				"on"
			]
		},
		"CallbackPost": {
			"description": "Subscribe to receive callbacks when specific system events occur",
			"type": "object",
			"properties": {
				"on": {
					"description": "Receive callbacks for these xMatters system events",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemEventType"
					}
				},
				"request": {
					"$ref": "#/definitions/Request"
				},
				"queue": {
					"description": "Store callbacks in a queue. Used when a customer cannot receive callbacks but can poll xMatters systems to retrieve them.",
					"type": "boolean"
				},
				"script": {
					"description": "Integration script to execute when this callback fires",
					"type": "string"
				}
			},
			"required": [
				"on"
			]
		},
		"Request": {
			"description": "Outbound HTTP request definition",
			"type": "object",
			"properties": {
				"method": {
					"type": "string",
					"enum": ["POST"]
				},
				"url": {
					"description": "Callback URL to which event callbacks will be sent",
					"type": "string",
					"format": "uri"
				},
				"headers": {
					"description": "Map of header names and values (both strings)",
					"type": "object"
				}
			},
			"required": [
				"method",
				"url"
			]
		},
		"Conference": {
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"Conferences": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Conference"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Device": {
			"description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Recipient"
				}
			],
			"discriminator": "deviceType",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": [
						"DEVICE"
					]
				},
				"deviceType": {
					"type": "string",
					"enum": [
						"ANDROID_PUSH",
						"APPLE_PUSH",
						"BLACKBERRY_PUSH",
						"BROWSER",
						"EMAIL",
						"FAX",
						"GENERIC",
						"IM",
						"NUMERIC_PAGER",
						"TEXT_PAGER",
						"TEXT_PHONE",
						"VOICE",
						"VOICE_IVR"
					]
				},
				"defaultDevice": {
					"type": "boolean"
				},
				"priorityThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"],
					"default": "LOW"
				},
				"sequence": {
					"type": "integer",
					"default": -1
				},
				"delay": {
					"type": "integer",
					"default": 0
				},
				"testStatus": {
					"description": "Validation status of the Device",
					"type": "string",
					"enum": ["UNTESTED", "PENDING", "TESTED"]
				},
				"owner": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"timeframes": {
					"$ref": "#/definitions/DeviceTimeframes"
				}
			},
			"required": [
				"deviceType",
				"owner"
			]
		},
		"Devices": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Device"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"DevicePost": {
			"description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/RecipientPost"
				}
			],
			"discriminator": "deviceType",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["DEVICE"]
				},
				"deviceType": {
					"type": "string",
					"enum": [
						"ANDROID_PUSH",
						"APPLE_PUSH",
						"BLACKBERRY_PUSH",
						"BROWSER",
						"EMAIL",
						"FAX",
						"GENERIC",
						"IM",
						"NUMERIC_PAGER",
						"TEXT_PAGER",
						"TEXT_PHONE",
						"VOICE",
						"VOICE_IVR"
					]
				},
				"priorityThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"],
					"default": "LOW"
				},
				"sequence": {
					"type": "integer",
					"default": -1
				},
				"delay": {
					"type": "integer",
					"default": 0
				},
				"testStatus": {
					"description": "Validation status of the Device",
					"type": "string",
					"enum": ["UNTESTED", "PENDING", "TESTED"]
				},
				"owner": {
					"$ref": "#/definitions/ReferenceById"
				},
				"timeframes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceTimeframePost"
					}
				}
			},
			"required": [
				"deviceType",
				"owner"
			]
		},
		"EmailDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"EMAIL"
					]
				},
				"emailAddress": {
					"type": "string"
				}
			},
			"required": [
				"emailAddress"
			]
		},
		"VoiceDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"VOICE"
					]
				},
				"phoneNumber": {
					"type": "string",
					"description": "E.164 international format phone number including country code and extension"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"SMSDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"TEXT_PHONE"
					]
				},
				"phoneNumber": {
					"type": "string",
					"description": "E.164 international format phone number including country code and extension"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"TextPagerDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"TEXT_PAGER"
					]
				},
				"pin": {
					"type": "string"
				},
				"twoWayDevice": {
					"type": "boolean"
				}
			},
			"required": [
				"pin",
				"twoWayDevice"
			]
		},
		"NumericPagerDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"NUMERIC_PAGER"
					]
				},
				"pagerNumber": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"areaCode": {
					"type": "string"
				},
				"pin": {
					"type": "string"
				}
			}
		},
		"IMDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"IM"
					]
				},
				"address": {
					"type": "string"
				}
			},
			"required": [
				"address"
			]
		},
		"ApplePushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"APPLE_PUSH"
					]
				},
				"accountId": {
					"type": "string"
				},
				"apnToken": {
					"type": "string"
				},
				"alertSound": {
					"type": "string"
				},
				"soundStatus": {
					"type": "string"
				},
				"soundThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"description": {
					"type": "string"
				}
			},
			"required": [
				"accountId",
				"apnToken"
			]
		},
		"AndroidPushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"ANDROID_PUSH"
					]
				},
				"accountId": {
					"type": "string"
				},
				"registrationId": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			},
			"required": [
				"accountId",
				"registrationId"
			]
		},
		"BlackberryPushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"BLACKBERRY_PUSH"
					]
				},
				"accountId": {
					"type": "string"
				},
				"registrationId": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			},
			"required": [
				"accountId",
				"registrationId"
			]
		},
		"FaxDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"FAX"
					]
				},
				"phoneNumber": {
					"type": "string",
					"pattern": "^\\d{5,20}$"
				},
				"country": {
					"type": "string",
					"enum": ["AR", "AU", "BR", "CA", "FR", "DE", "HK", "IN", "IT", "JP", "PT", "PR", "GB", "US"]
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"PublicAddressDevice": {
			"description": "a.k.a. Voice IVR",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"VOICE_IVR"
					]
				},
				"phoneNumber": {
					"type": "string",
					"description": "E.164 international format phone number including country code and extension"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"GenericDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"deviceType": {
					"type": "string",
					"enum": [
						"GENERIC"
					]
				},
				"pin": {
					"type": "string"
				}
			}
		},
		"AnyDevice": {
			"description": "A device in xMatters is any means of receiving a notification message. Devices can include physical items like phones, or intangible items such as email accounts.",
			"type": "object",
			"anyOf": [
				{
					"$ref": "#/definitions/EmailDevice"
				},
				{
					"$ref": "#/definitions/VoiceDevice"
				},
				{
					"$ref": "#/definitions/SMSDevice"
				},
				{
					"$ref": "#/definitions/TextPagerDevice"
				},
				{
					"$ref": "#/definitions/NumericPagerDevice"
				},
				{
					"$ref": "#/definitions/IMDevice"
				},
				{
					"$ref": "#/definitions/ApplePushDevice"
				},
				{
					"$ref": "#/definitions/AndroidPushDevice"
				},
				{
					"$ref": "#/definitions/BlackberryPushDevice"
				},
				{
					"$ref": "#/definitions/FaxDevice"
				},
				{
					"$ref": "#/definitions/PublicAddressDevice"
				},
				{
					"$ref": "#/definitions/GenericDevice"
				}
			]
		},
		"DeviceTimeframe": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "string",
					"format": "date-time"
				},
				"endTime": {
					"type": "string",
					"format": "date-time"
				},
				"durationInMinutes": {
					"type": "integer"
				},
				"days": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": ["SU", "MO", "TU", "WE", "TH", "FR", "SA"]
					}
				},
				"excludeHolidays": {
					"type": "boolean"
				}
			},
			"required": [
				"name",
				"startTime",
				"excludeHolidays"
			]
		},
		"DeviceTimeframes": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceTimeframe"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"DeviceTimeframePost": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "string",
					"format": "date-time"
				},
				"durationInMinutes": {
					"type": "integer"
				},
				"days": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": ["SU", "MO", "TU", "WE", "TH", "FR", "SA"]
					}
				},
				"excludeHolidays": {
					"type": "boolean"
				}
			},
			"required": [
				"name",
				"startTime",
				"excludeHolidays"
			]
		},
		"Form": {
			"type": "object",
			"description": "A form",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"Trigger": {
			"description": "The submission of a form. The trigger for an event",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"form": {
					"$ref": "#/definitions/Form"
				},
				"submitter": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"properties": {
					"description": "Map of property names and values",
					"type": "object"
				},
				"recipients": {
					"$ref": "#/definitions/Recipients"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"conferences": {
					"$ref": "#/definitions/Conferences"
				},
				"responses": {
					"$ref": "#/definitions/Responses"
				}
			},
			"required": ["form"]
		},
		"TriggerPost": {
			"description": "The submission of a form. The trigger for an event",
			"type": "object",
			"properties": {
				"form": {
					"$ref": "#/definitions/ReferenceById"
				},
				"submitter": {
					"$ref": "#/definitions/ReferenceById"
				},
				"properties": {
					"description": "Map of property names and values",
					"type": "object"
				},
				"recipients": {
					"description": "Note: required if pre-configured recipients do not exist",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"callbacks": {
					"description": "Callbacks applicable to this event only",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallbackPost"
					}
				},
				"conferences": {
					"description": "Set this value to the name of an existing conference bridge, or leave it empty to create a new xMatters-hosted conference bridge.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				},
				"responseOptions": {
					"description": "A list of the response options to be displayed for the event. Response options are identified by a Universally Unique Identifier (UUID).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": ["form"]
		},
		"Event": {
			"description": "An event represents a situation that requires a notification. Event is also used to refer to an incident or situation as it progresses through the system, from injection to notification to resolution.",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"startTime": {
					"type": "string",
					"description": "The start time of the event",
					"format": "date-time"
				},
				"status": {
					"type": "string",
					"description": "The status of the event",
					"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"trigger": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"notifications": {
					"$ref": "#/definitions/Notifications"
				}
			},
			"required": ["id", "startTime", "status", "priority", "trigger", "notifications"]
		},
		"Events": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Event"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"EventPost": {
			"description": "An event represents a situation that requires a notification. Event is also used to refer to an incident or situation as it progresses through the system, from injection to notification to resolution.",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"status": {
					"type": "string",
					"description": "The status of the event",
					"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
				}
			},
			"required": [
				"id",
				"status"
			]
		},
		"Group": {
			"description": "Groups are used for collecting users and devices and organizing them into notification schedules.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Recipient"
				}
			],
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": [
						"GROUP"
					]
				},
				"description": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"useDefaultDevices": {
					"description": "Indicates whether to use Group member’s default Devices when other Devices are not available.",
					"type": "boolean"
				},
				"allowDuplicates": {
					"description": "Indicates whether the Group allows duplicate members.",
					"type": "boolean"
				},
				"observedByAll": {
					"description": "Indicates whether all Roles can observe this Group.",
					"type": "boolean"
				},
				"site": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"supervisors": {
					"$ref": "#/definitions/People"
				},
				"shifts": {
					"$ref": "#/definitions/Shifts"
				},
				"members": {
					"$ref": "#/definitions/Recipients"
				},
				"links": {
					"$ref": "#/definitions/GroupLinks"
				}
			},
			"required": [
				"useDefaultDevices",
				"allowDuplicates",
				"observedByAll",
				"supervisors"
			]
		},
		"GroupLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				},
				"shifts": {
					"type": "string",
					"description": "Shifts of this group"
				},
				"members": {
					"type": "string",
					"description": "Members of this group"
				}
			},
			"required": [
				"self",
				"shifts",
				"members"
			]
		},
		"GroupPost": {
			"description": "Groups are used for collecting users and devices and organizing them into notification schedules.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/RecipientPost"
				}
			],
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["GROUP"]
				},
				"description": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"useDefaultDevices": {
					"description": "Indicates whether to use Group member’s default Devices when other Devices are not available.",
					"type": "boolean"
				},
				"allowDuplicates": {
					"description": "Indicates whether the Group allows duplicate members.",
					"type": "boolean"
				},
				"observedByAll": {
					"description": "Indicates whether all Roles can observe this Group.",
					"type": "boolean"
				},
				"site": {
					"$ref": "#/definitions/ReferenceById"
				},
				"supervisors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": [
				"recipientType",
				"useDefaultDevices",
				"allowDuplicates",
				"observedByAll",
				"supervisors"
			]
		},
		"Info": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"dependencies": {
					"type": "object"
				}
			},
			"required": [
				"name",
				"version"
			]
		},
		"IntegrationFunction": {
			"description": "An integration function",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"script": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				}
			},
			"required": ["id"]
		},
		"IntegrationFunctions": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/IntegrationFunction"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"IntegrationFunctionInvocation": {
			"description": "An integration function invocation",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"function": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				}
			},
			"required": ["id", "function"]
		},
		"IntegrationFunctionInvocationPost": {
			"description": "An integration function invocation",
			"type": "object",
			"properties": {
				"function": {
					"$ref": "#/definitions/ReferenceById"
				}
			},
			"required": ["function"]
		},
		"IntegrationScript": {
			"description": "An integration script",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"functions": {
					"$ref": "#/definitions/IntegrationFunctions"
				}
			},
			"required": ["id"]
		},
		"Notification": {
			"description": "A notification is any message sent by xMatters to a device, in order to inform a person of an event that requires attention. The alert contains information about the event, such the time and location, and may ask the person to respond, acknowledging that they have received the notification.",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"event": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"recipient": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"sender": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"incident": {
					"type": "string"
				},
				"domain": {
					"type": "string"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"status": {
					"type": "string"
				},
				"created": {
					"type": "string",
					"description": "Date and time the notification was created",
					"format": "date-time"
				}
			},
			"required": ["id", "event", "recipient", "sender", "created"]
		},
		"Notifications": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Notification"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"NotificationPost": {
			"description": "A notification is any message sent by xMatters to a device, in order to inform a person of an event that requires attention. The alert contains information about the event, such the time and location, and may ask the person to respond, acknowledging that they have received the notification.",
			"type": "object",
			"properties": {
				"event": {
					"$ref": "#/definitions/ReferenceById"
				},
				"recipient": {
					"$ref": "#/definitions/ReferenceById"
				},
				"sender": {
					"$ref": "#/definitions/ReferenceById"
				},
				"incident": {
					"type": "string"
				},
				"domain": {
					"type": "string"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"status": {
					"type": "string"
				}
			},
			"required": [
				"event",
				"recipient",
				"sender"
			]
		},
		"PaginationLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this page of the result set",
					"format": "uri"
				},
				"previous": {
					"type": "string",
					"description": "URL of the previous page of the result set",
					"format": "uri"
				},
				"next": {
					"type": "string",
					"description": "URL of the next page of the result set",
					"format": "uri"
				}
			},
			"required": [
				"self"
			]
		},
		"Person": {
			"description": "Someone in the xMatters system who can receive notifications is called a 'Person'. Every person in the xMatters system is a user defined by a set of details, including ID number, user name, login password, and so on.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Recipient"
				}
			],
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON"
					]
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"webLogin": {
					"type": "string"
				},
				"phoneLogin": {
					"type": "string"
				},
				"site": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				}
			},
			"required": [
				"firstName",
				"lastName",
				"language",
				"timezone",
				"webLogin",
				"roles",
				"site"
			]
		},
		"People": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Person"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"PersonPost": {
			"description": "Someone in the xMatters system who can receive notifications is called a 'Person'. Every person in the xMatters system is a user defined by a set of details, including ID number, user name, login password, and so on.",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/RecipientPost"
				}
			],
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["PERSON"]
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"webLogin": {
					"type": "string"
				},
				"phoneLogin": {
					"type": "string"
				},
				"roles": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"site": {
					"$ref": "#/definitions/ReferenceById"
				},
				"supervisors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": [
				"firstName",
				"lastName",
				"language",
				"timezone",
				"webLogin",
				"roles"
			]
		},
		"Recipient": {
			"description": "A Recipient can be the target of a notification. Groups, People and Devices are all Recipients",
			"type": "object",
			"discriminator": "recipientType",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"externallyOwned": {
					"description": "Externally owned = false means that data locking in the Web UI will never take place for a record, regardless of the data locking configuration. Externally owned = true means that data locking in the Web UI will take place for a record, but only for the fields that have data locking enabled. These records can only be deleted via EPIC.",
					"type": "boolean",
					"default": false
				},
				"externalKey": {
					"type": "string"
				},
				"locked": {
					"description": "When objects are in an externally owned state, locked controls which externally owned data fields users can change",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"targetName",
				"recipientType",
				"status",
				"externallyOwned",
				"links"
			]
		},
		"Recipients": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Recipient"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"RecipientPost": {
			"description": "A Recipient can be the target of a notification. Groups, People and Devices are all Recipients",
			"type": "object",
			"discriminator": "recipientType",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				},
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"],
					"default": "ACTIVE"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				}
			},
			"required": [
				"recipientType",
				"targetName"
			]
		},
		"RecipientReference": {
			"description": "Reference to an existing recipient",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				}
			},
			"required": [
				"id",
				"recipientType"
			]
		},
		"ReferenceById": {
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				}
			},
			"required": [
				"id"
			]
		},
		"ReferenceByIdAndSelfLink": {
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"links"
			]
		},
		"ReferenceBySelfLink": {
			"type": "object",
			"properties": {
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"links"
			]
		},
		"Response": {
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"Responses": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Response"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Revision": {
			"type": "object",
			"description": "A domain entity revision",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"when": {
					"type": "string",
					"description": "The time of the revision",
					"format": "date-time"
				},
				"who": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"what": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"how": {
					"type": "object"
				}
			},
			"required": ["id", "when", "who"]
		},
		"Revisions": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Revision"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"SelfLink": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				}
			},
			"required": [
				"self"
			]
		},
		"Shift": {
			"type": "object",
			"description": "A shift. Edges: members",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"group": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"members": {
					"$ref": "#/definitions/Recipients"
				},
				"links": {
					"$ref": "#/definitions/ShiftLinks"
				}
			},
			"required": [
				"id",
				"name",
				"status",
				"group",
				"links"
			]
		},
		"ShiftLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				},
				"members": {
					"type": "string",
					"description": "Members of this shift"
				}
			},
			"required": [
				"self",
				"members"
			]
		},
		"ShiftPost": {
			"type": "object",
			"description": "Adding or updating a shift. Will attempt to find shift by id if provided before creating a new shift in the system.",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"default": "ACTIVE",
					"enum": ["ACTIVE", "INACTIVE"]
				}
			},
			"required": [
				"name"
			]
		},
		"Shifts": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Shift"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Site": {
			"type": "object",
			"description": "A geographic area",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"default": "ACTIVE",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"address1": {
					"type": "string"
				},
				"address2": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"postalCode": {
					"type": "string"
				},
				"latitude": {
					"type": "number"
				},
				"longitude": {
					"type": "number"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"name",
				"status",
				"language",
				"timezone",
				"country",
				"externallyOwned",
				"links"
			]
		},
		"SystemEventType": {
			"description": "Observable system event type",
			"type": "string",
			"enum": [
				"call.busy",
				"call.connected",
				"call.dropped",
				"call.failed",
				"call.hung_up",
				"call.in",
				"call.no_answer",
				"call.reached_voicemail",
				"conference.joined",
				"conference.login_failed",
				"device.invalidated",
				"device.override_failed",
				"device.replaced",
				"email.failed",
				"email.opened",
				"event.annotated",
				"event.completed",
				"event.created",
				"event.resumed",
				"event.suspended",
				"event.terminated",
				"fax.status",
				"fax.submitted",
				"group.deleted",
				"incident.deleted",
				"notification.delayed",
				"notification.delivered",
				"notification.discarded",
				"notification.escalated",
				"notification.failed",
				"notification.recipient_not_found",
				"notification.recipient_replaced",
				"notification.sent",
				"public_address.failed",
				"response.mapped",
				"response.received",
				"response.rejected",
				"sms.delivered",
				"sms.read"
			]
		},
		"User": {
			"description": "Every person with a login and password to the xMatters system is a user.",
			"type": "object",
			"properties": {
				"id": {
					"description": "The unique identifier",
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			}
		},
		"Users": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/User"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"BadRequestResponse": {
			"description": "Bad Request API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [400]
				},
				"reason": {
					"type": "string",
					"enum": ["Bad Request"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"UnauthorizedResponse": {
			"description": "Unauthorized API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [401]
				},
				"reason": {
					"type": "string",
					"enum": ["Unauthorized"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"ForbiddenResponse": {
			"description": "Forbidden API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [403]
				},
				"reason": {
					"type": "string",
					"enum": ["Forbidden"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"NotFoundResponse": {
			"description": "Not Found API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [404]
				},
				"reason": {
					"type": "string",
					"enum": ["Not Found"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"ConflictResponse": {
			"description": "Conflict API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [409]
				},
				"reason": {
					"type": "string",
					"enum": ["Conflict"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"TooManyRequestsResponse": {
			"description": "Too Many Requests API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [429]
				},
				"reason": {
					"type": "string",
					"enum": ["Too Many Requests"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"InternalServerErrorResponse": {
			"description": "Internal Server Error API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [500]
				},
				"reason": {
					"type": "string",
					"enum": ["Internal Server Error"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		}
	},
	"parameters": {
		"eventId": {
			"name": "eventId",
			"in": "path",
			"description": "The event id",
			"required": true,
			"type": "string"
		},
		"groupId": {
			"name": "groupId",
			"in": "path",
			"description": "The group uuid or targetName",
			"required": true,
			"type": "string"
		},
		"personId": {
			"name": "personId",
			"in": "path",
			"description": "The person's uuid or targetName",
			"required": true,
			"type": "string"
		},
		"deviceId": {
			"name": "deviceId",
			"in": "path",
			"description": "The device uuid or targetName",
			"required": true,
			"type": "string"
		},
		"memberId": {
			"name": "memberId",
			"in": "path",
			"description": "The recipient's uuid or targetName",
			"required": true,
			"type": "string"
		},
		"shiftId": {
			"name": "shiftId",
			"in": "path",
			"description": "The uuid or name of the shift. e.g. 24/7 (Must be URL encoded)",
			"required": true,
			"type": "string"
		},
		"siteId": {
			"name": "siteId",
			"in": "path",
			"description": "The site uuid or name",
			"required": true,
			"type": "string"
		},
		"userId": {
			"name": "userId",
			"in": "path",
			"description": "The person's uuid or username",
			"required": true,
			"type": "string"
		},
		"scriptId": {
			"name": "scriptId",
			"in": "path",
			"description": "The script uuid",
			"required": true,
			"type": "string"
		},
		"functionId": {
			"name": "functionId",
			"in": "path",
			"description": "The function uuid",
			"required": true,
			"type": "string"
		},
		"limit": {
			"name": "limit",
			"in": "query",
			"description": "Maximum result size to return",
			"required": false,
			"type": "integer"
		},
		"offset": {
			"name": "offset",
			"in": "query",
			"description": "Skip this many results before returning the result set",
			"required": false,
			"type": "integer"
		},
		"embed": {
			"name": "embed",
			"in": "query",
			"description": "Comma separated list of linked domain entities to embed in the response",
			"required": false,
			"type": "string"
		}
	},
	"responses": {
		"202": {
			"description": "Accepted"
		},
		"204": {
			"description": "No Content"
		},
		"400": {
			"description": "Bad Request",
			"schema": {
				"$ref": "#/definitions/BadRequestResponse"
			}
		},
		"401": {
			"description": "Unauthorized",
			"schema": {
				"$ref": "#/definitions/UnauthorizedResponse"
			}
		},
		"403": {
			"description": "Forbidden",
			"schema": {
				"$ref": "#/definitions/ForbiddenResponse"
			}
		},
		"404": {
			"description": "Not Found",
			"schema": {
				"$ref": "#/definitions/NotFoundResponse"
			}
		},
		"409": {
			"description": "Conflict",
			"schema": {
				"$ref": "#/definitions/ConflictResponse"
			}
		},
		"429": {
			"description": "Too Many Requests",
			"schema": {
				"$ref": "#/definitions/TooManyRequestsResponse"
			}
		},
		"500": {
			"description": "Internal Error",
			"schema": {
				"$ref": "#/definitions/InternalServerErrorResponse"
			}
		}
	}
}