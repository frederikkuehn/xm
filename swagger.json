{
	"swagger": "2.0",
	"info": {
		"title": "xM API",
		"description": "The xM API",
		"version": "0.1.0"
	},
	"host": "api.xmatters.com",
	"basePath": "/api/xm/1",
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/devices": {
			"post": {
				"tags": [
					"Devices"
				],
				"summary": "Add or update a device",
				"description": "Add or update a device",
				"operationId": "postDevice",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DevicePost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/devices/{deviceId}": {
			"get": {
				"tags": [
					"Devices"
				],
				"summary": "Retrieve device information",
				"description": "Retrieve device information",
				"operationId": "getDevice",
				"parameters": [
					{
						"$ref": "#/parameters/deviceId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"delete": {
				"tags": [
					"Devices"
				],
				"summary": "Remove a device",
				"description": "Remove a device",
				"operationId": "deleteDevice",
				"parameters": [
					{
						"$ref": "#/parameters/deviceId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Device"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/events": {
			"get": {
				"tags": [
					"Events"
				],
				"summary": "Find events",
				"description": "Find events",
				"operationId": "getEvents",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where event start time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where event start time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "priority",
						"in": "query",
						"description": "Where priority is at or above this level",
						"required": false,
						"type": "string",
						"enum": ["LOW", "MEDIUM", "HIGH"]
					},
					{
						"name": "status",
						"in": "query",
						"description": "Where status matches the provided value",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Events"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"post": {
				"tags": [
					"Events"
				],
				"summary": "Update an existing event",
				"description": "Update an existing event",
				"operationId": "postEvent",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EventPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/events/{eventId}": {
			"get": {
				"tags": [
					"Events"
				],
				"summary": "Retrieve event information",
				"description": "Retrieve event information",
				"operationId": "getEvent",
				"parameters": [
					{
						"$ref": "#/parameters/eventId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Event"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/form-submissions": {
			"post": {
				"tags": [
					"Forms"
				],
				"summary": "Submit a form",
				"description": "Submit a form (creates an event)",
				"operationId": "postFormSubmission",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FormSubmissionPost"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/FormSubmission"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups": {
			"post": {
				"tags": [
					"Groups"
				],
				"summary": "Add or update a group",
				"description": "Add or update a group",
				"operationId": "postGroup",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GroupPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}": {
			"get": {
				"tags": [
					"Groups"
				],
				"summary": "Retrieve group information",
				"description": "Retrieve group information",
				"operationId": "getGroup",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"delete": {
				"tags": [
					"Groups"
				],
				"summary": "Remove a group",
				"description": "Remove a group",
				"operationId": "deleteGroup",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Group"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/members": {
			"get": {
				"tags": [
					"Group Members"
				],
				"summary": "List group members",
				"description": "List group members",
				"operationId": "getGroupMembers",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipients"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"post": {
				"tags": [
					"Group Members"
				],
				"summary": "Add group members",
				"description": "Add group members",
				"operationId": "postGroupMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecipientReference"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/members/{memberId}": {
			"delete": {
				"tags": [
					"Group Members"
				],
				"summary": "Remove group member",
				"description": "Remove group member",
				"operationId": "deleteGroupMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/memberId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/shifts": {
			"get": {
				"tags": [
					"Shifts"
				],
				"summary": "List shifts",
				"description": "List shifts",
				"operationId": "getShifts",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shifts"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"post": {
				"tags": [
					"Shifts"
				],
				"summary": "Add or update a shift",
				"description": "Add or update a shift",
				"operationId": "postShift",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ShiftPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}": {
			"get": {
				"tags": [
					"Shifts"
				],
				"summary": "Retrieve shift information",
				"description": "Retrieve shift information",
				"operationId": "getShift",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"delete": {
				"tags": [
					"Shifts"
				],
				"summary": "Remove a shift",
				"description": "Remove a shift",
				"operationId": "deleteShift",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "shiftId",
						"in": "path",
						"description": "The id or name of the shift. e.g. 24/7. Must be URL encoded.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Shift"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/members": {
			"get": {
				"tags": [
					"Shift Members"
				],
				"summary": "List shift members",
				"description": "List shift members",
				"operationId": "getShiftMembers",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter by status",
						"required": false,
						"type": "string",
						"enum": ["ACTIVE", "INACTIVE"]
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipients"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"post": {
				"tags": [
					"Shift Members"
				],
				"summary": "Add shift members",
				"description": "Add shift members",
				"operationId": "postShiftMember",
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"description": "The group uuid or targetName",
						"required": true,
						"type": "string"
					},
					{
						"name": "shiftId",
						"in": "path",
						"description": "The id or name of the shift. e.g. 24/7. Must be URL encoded.",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecipientReference"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/groups/{groupId}/shifts/{shiftId}/members/{memberId}": {
			"delete": {
				"tags": [
					"Shift Members"
				],
				"summary": "Remove shift member",
				"description": "Remove shift member",
				"operationId": "deleteShiftMember",
				"parameters": [
					{
						"$ref": "#/parameters/groupId"
					},
					{
						"$ref": "#/parameters/shiftId"
					},
					{
						"$ref": "#/parameters/memberId"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Recipient"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/info": {
			"get": {
				"tags": [
					"Info"
				],
				"summary": "Retrieve API information",
				"description": "Retrieve API information",
				"operationId": "getInfo",
				"parameters": [],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Info"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/notifications": {
			"post": {
				"tags": [
					"Notifications"
				],
				"summary": "Send a notification",
				"description": "Send a notification",
				"operationId": "postNotification",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationPost"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Notification"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Find notifications",
				"description": "Find notifications",
				"operationId": "getNotifications",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where notification created time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where notification created time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "priority",
						"in": "query",
						"description": "Where priority is at or above this level",
						"required": false,
						"type": "string",
						"enum": ["LOW", "MEDIUM", "HIGH"]
					},
					{
						"name": "status",
						"in": "query",
						"description": "Where status matches the provided value",
						"required": false,
						"type": "string"
					},
					{
						"name": "event",
						"in": "query",
						"description": "Filter by event",
						"required": false,
						"type": "string"
					},
					{
						"name": "recipient",
						"in": "query",
						"description": "Filter by recipient",
						"required": false,
						"type": "string"
					},
					{
						"name": "sender",
						"in": "query",
						"description": "Filter by sender",
						"required": false,
						"type": "string"
					},
					{
						"name": "incident",
						"in": "query",
						"description": "Filter by incident",
						"required": false,
						"type": "string"
					},
					{
						"name": "domain",
						"in": "query",
						"description": "Filter by domain",
						"required": false,
						"type": "string"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Notifications"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/notifications/{notificationId}": {
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Retrieve notification information",
				"description": "Retrieve notification information",
				"operationId": "getNotification",
				"parameters": [
					{
						"$ref": "#/parameters/notificationId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Notification"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/people": {
			"post": {
				"tags": [
					"People"
				],
				"summary": "Add or update a person",
				"description": "Add or update a person",
				"operationId": "postPerson",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PersonPost"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Updated",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"400": {
						"$ref": "#/responses/400"
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/people/{personId}": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Retrieve person information",
				"description": "Retrieve person information",
				"operationId": "getPerson",
				"parameters": [
					{
						"$ref": "#/parameters/personId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			},
			"delete": {
				"tags": [
					"People"
				],
				"summary": "Remove a person",
				"description": "Remove a person",
				"operationId": "deletePerson",
				"parameters": [
					{
						"name": "personId",
						"in": "path",
						"description": "The person's uuid or targetName",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Person"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"409": {
						"$ref": "#/responses/409"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/people/{personId}/devices": {
			"get": {
				"tags": [
					"People"
				],
				"summary": "Retrieve a person's devices",
				"description": "Retrieve a person's devices",
				"operationId": "getPersonDevices",
				"parameters": [
					{
						"$ref": "#/parameters/personId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Devices"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/revisions": {
			"get": {
				"tags": [
					"Revisions"
				],
				"summary": "Find revisions",
				"description": "Find revisions",
				"operationId": "getRevisions",
				"parameters": [
					{
						"name": "after",
						"in": "query",
						"description": "Where revision time is after this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Where revision time is before this time",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "userId",
						"in": "query",
						"description": "User who made the revision",
						"required": false,
						"type": "string"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Revisions"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/revisions/{revisionId}": {
			"get": {
				"tags": [
					"Revisions"
				],
				"summary": "Retrieve revision information",
				"description": "Retrieve revision information",
				"operationId": "getRevision",
				"parameters": [
					{
						"$ref": "#/parameters/revisionId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Revision"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/sites/{siteId}": {
			"get": {
				"tags": [
					"Sites"
				],
				"summary": "Retrieve site information",
				"description": "Retrieve site information",
				"operationId": "getSite",
				"parameters": [
					{
						"$ref": "#/parameters/siteId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Site"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		},
		"/users/{userId}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Retrieve user information",
				"description": "Retrieve user information",
				"operationId": "getUser",
				"parameters": [
					{
						"$ref": "#/parameters/userId"
					},
					{
						"$ref": "#/parameters/embed"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"401": {
						"$ref": "#/responses/401"
					},
					"403": {
						"$ref": "#/responses/403"
					},
					"404": {
						"$ref": "#/responses/404"
					},
					"429": {
						"$ref": "#/responses/429"
					},
					"500": {
						"$ref": "#/responses/500"
					}
				}
			}
		}
	},
	"definitions": {
		"Callback": {
			"description": "Subscribe to receive callbacks when specific system events occur",
			"type": "object",
			"properties": {
				"id": {
					"description": "Unique identifier",
					"type": "string"
				},
				"on": {
					"description": "Receive callbacks only for these system events",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemEventType"
					}
				},
				"request": {
					"$ref": "#/definitions/Request"
				},
				"queue": {
					"description": "Store callbacks in a queue. Used when a customer cannot receive callbacks but can poll xMatters systems to retrieve them.",
					"type": "boolean"
				},
				"script": {
					"description": "Integration script to execute when this callback fires",
					"type": "string"
				}
			},
			"required": [
				"id",
				"on"
			]
		},
		"CallbackPost": {
			"description": "Subscribe to receive callbacks when specific system events occur",
			"type": "object",
			"properties": {
				"on": {
					"description": "Receive callbacks for these xMatters system events",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemEventType"
					}
				},
				"request": {
					"$ref": "#/definitions/Request"
				},
				"queue": {
					"description": "Store callbacks in a queue. Used when a customer cannot receive callbacks but can poll xMatters systems to retrieve them.",
					"type": "boolean"
				},
				"script": {
					"description": "Integration script to execute when this callback fires",
					"type": "string"
				}
			},
			"required": [
				"on"
			]
		},
		"Request": {
			"description": "Outbound HTTP request definition",
			"type": "object",
			"properties": {
				"method": {
					"type": "string",
					"enum": ["POST"]
				},
				"url": {
					"description": "Callback URL to which event callbacks will be sent",
					"type": "string",
					"format": "uri"
				},
				"headers": {
					"description": "Map of header names and values (both strings)",
					"type": "object"
				}
			},
			"required": [
				"method",
				"url"
			]
		},
		"Conference": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"Conferences": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Conference"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Device": {
			"type": "object",
			"discriminator": "deviceType",
			"properties": {
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"DEVICE"
					]
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"externallyOwned": {
					"description": "Externally owned = N means that data locking in the Web UI will never take place for a record, regardless of the data locking configuration. Externally owned = Y means that data locking in the Web UI will take place for a record, but only for the fields that have data locking enabled. These records can only be deleted via EPIC.",
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"locked": {
					"description": "When objects are in an externally owned state, locked controls which externally owned data fields users can change",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"deviceType": {
					"type": "string",
					"enum": [
						"EMAIL",
						"VOICE",
						"TEXT_PHONE",
						"TEXT_PAGER",
						"NUMERIC_PAGER",
						"IM",
						"BROWSER",
						"APPLE_PUSH",
						"FAX",
						"ANDROID_PUSH",
						"BLACKBERRY_PUSH",
						"VOICE_IVR"
					]
				},
				"description": {
					"type": "string"
				},
				"details": {
					"type": "string"
				},
				"defaultDevice": {
					"type": "boolean"
				},
				"priorityThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"],
					"default": "LOW"
				},
				"sequence": {
					"type": "integer",
					"default": -1
				},
				"delay": {
					"type": "integer",
					"default": 0
				},
				"testStatus": {
					"description": "Validation status of the Device",
					"type": "string",
					"enum": ["UNTESTED", "PENDING", "TESTED"]
				},
				"owner": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"timeframes": {
					"$ref": "#/definitions/DeviceTimeframes"
				}
			},
			"required": [
				"id",
				"targetName",
				"recipientType",
				"status",
				"externallyOwned",
				"deviceType",
				"emergencyDevice",
				"owner",
				"links"
			]
		},
		"Devices": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Device"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"DevicePost": {
			"type": "object",
			"discriminator": "deviceType",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["DEVICE"]
				},
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"],
					"default": "ACTIVE"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"deviceType": {
					"type": "string",
					"enum": [
						"EMAIL",
						"VOICE",
						"TEXT_PHONE",
						"TEXT_PAGER",
						"NUMERIC_PAGER",
						"IM",
						"BROWSER",
						"APPLE_PUSH",
						"FAX",
						"ANDROID_PUSH",
						"BLACKBERRY_PUSH",
						"VOICE_IVR"
					]
				},
				"description": {
					"type": "string"
				},
				"details": {
					"type": "string"
				},
				"emergencyDevice": {
					"type": "boolean",
					"default": false
				},
				"priorityThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"],
					"default": "LOW"
				},
				"sequence": {
					"type": "integer",
					"default": -1
				},
				"delay": {
					"type": "integer",
					"default": 0
				},
				"testStatus": {
					"description": "Validation status of the Device",
					"type": "string",
					"enum": ["UNTESTED", "PENDING", "TESTED"]
				},
				"owner": {
					"$ref": "#/definitions/ReferenceById"
				},
				"timeframes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceTimeframePost"
					}
				}
			},
			"required": [
				"recipientType",
				"targetName",
				"deviceType",
				"owner"
			]
		},
		"DeviceTimeframe": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "string",
					"format": "date-time"
				},
				"endTime": {
					"type": "string",
					"format": "date-time"
				},
				"durationInMinutes": {
					"type": "integer"
				},
				"days": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": ["SU", "MO", "TU", "WE", "TH", "FR", "SA"]
					}
				},
				"excludeHolidays": {
					"type": "boolean"
				}
			},
			"required": [
				"name",
				"startTime",
				"excludeHolidays"
			]
		},
		"DeviceTimeframes": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceTimeframe"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"DeviceTimeframePost": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "string",
					"format": "date-time"
				},
				"durationInMinutes": {
					"type": "integer"
				},
				"days": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": ["SU", "MO", "TU", "WE", "TH", "FR", "SA"]
					}
				},
				"excludeHolidays": {
					"type": "boolean"
				}
			},
			"required": [
				"name",
				"startTime",
				"excludeHolidays"
			]
		},
		"EmailDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"address": {
					"type": "string"
				}
			},
			"required": [
				"address"
			]
		},
		"VoiceDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"phoneNumber": {
					"$ref": "#/definitions/PhoneNumber"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"TextPhoneDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"phoneNumber": {
					"$ref": "#/definitions/PhoneNumber"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"TextPagerDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"pin": {
					"type": "string"
				},
				"twoWayDevice": {
					"type": "boolean"
				}
			},
			"required": [
				"pin",
				"twoWayDevice"
			]
		},
		"NumericPagerDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"pagerNumber": {
					"$ref": "#/definitions/PhoneNumber"
				},
				"pin": {
					"type": "string"
				},
				"twoWayDevice": {
					"type": "boolean"
				}
			}
		},
		"IMDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"address": {
					"type": "string"
				}
			},
			"required": [
				"address"
			]
		},
		"ApplePushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"accountId": {
					"type": "string"
				},
				"apnToken": {
					"type": "string"
				},
				"alertSound": {
					"type": "string"
				},
				"soundStatus": {
					"type": "string"
				},
				"soundThreshold": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				}
			},
			"required": [
				"accountId",
				"apnToken"
			]
		},
		"AndroidPushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"accountId": {
					"type": "string"
				},
				"registrationId": {
					"type": "string"
				}
			},
			"required": [
				"accountId",
				"registrationId"
			]
		},
		"BlackberryPushDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"accountId": {
					"type": "string"
				},
				"registrationId": {
					"type": "string"
				}
			},
			"required": [
				"accountId",
				"registrationId"
			]
		},
		"FaxDevice": {
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"faxNumber": {
					"$ref": "#/definitions/PhoneNumber"
				}
			},
			"required": [
				"faxNumber"
			]
		},
		"PublicAddressDevice": {
			"description": "a.k.a. Voice IVR",
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/Device"
				}
			],
			"properties": {
				"phoneNumber": {
					"$ref": "#/definitions/PhoneNumber"
				}
			},
			"required": [
				"phoneNumber"
			]
		},
		"Form": {
			"type": "object",
			"description": "A form",
			"properties": {
				"id": {
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"FormSubmission": {
			"type": "object",
			"description": "A form submission",
			"properties": {
				"id": {
					"type": "string"
				},
				"form": {
					"$ref": "#/definitions/Form"
				},
				"submitter": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"properties": {
					"description": "Map of property names and values",
					"type": "object"
				},
				"recipients": {
					"$ref": "#/definitions/Recipients"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"conferences": {
					"$ref": "#/definitions/Conferences"
				},
				"responses": {
					"$ref": "#/definitions/Responses"
				}
			},
			"required": ["form"]
		},
		"FormSubmissionPost": {
			"type": "object",
			"description": "A form submission",
			"properties": {
				"form": {
					"$ref": "#/definitions/ReferenceById"
				},
				"submitter": {
					"$ref": "#/definitions/ReferenceById"
				},
				"properties": {
					"description": "Map of property names and values",
					"type": "object"
				},
				"recipients": {
					"description": "Note: required if pre-configured recipients do not exist",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"callbacks": {
					"description": "Callbacks applicable to this event only",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallbackPost"
					}
				},
				"conferences": {
					"description": "Set this value to the name of an existing conference bridge, or leave it empty to create a new xMatters-hosted conference bridge.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				},
				"responseOptions": {
					"description": "A list of the response options to be displayed for the event. Response options are identified by a Universally Unique Identifier (UUID).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": ["form"]
		},
		"Event": {
			"type": "object",
			"description": "An event",
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier for the event"
				},
				"startTime": {
					"type": "string",
					"description": "The start time of the event",
					"format": "date-time"
				},
				"status": {
					"type": "string",
					"description": "The status of the event",
					"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"formSubmission": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"notifications": {
					"$ref": "#/definitions/Notifications"
				}
			},
			"required": ["id", "startTime", "status", "priority", "formSubmission", "notifications"]
		},
		"Events": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Event"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"EventPost": {
			"type": "object",
			"description": "An event update",
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier for the event"
				},
				"status": {
					"type": "string",
					"description": "The status of the event",
					"enum": ["ACTIVE", "SUSPENDED", "TERMINATED"]
				}
			},
			"required": [
				"id",
				"status"
			]
		},
		"Group": {
			"description": "A group. Edges: shifts, members",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"GROUP"
					]
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"externallyOwned": {
					"description": "Externally owned = N means that data locking in the Web UI will never take place for a record, regardless of the data locking configuration. Externally owned = Y means that data locking in the Web UI will take place for a record, but only for the fields that have data locking enabled. These records can only be deleted via EPIC.",
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"locked": {
					"description": "When objects are in an externally owned state, locked controls which externally owned data fields users can change",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"shifts": {
					"$ref": "#/definitions/Shifts"
				},
				"members": {
					"$ref": "#/definitions/Recipients"
				},
				"links": {
					"$ref": "#/definitions/GroupLinks"
				}
			},
			"required": [
				"id",
				"targetName",
				"recipientType",
				"status",
				"externallyOwned",
				"links"
			]
		},
		"GroupLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				},
				"shifts": {
					"type": "string",
					"description": "Shifts of this group"
				},
				"members": {
					"type": "string",
					"description": "Members of this group"
				}
			},
			"required": [
				"self",
				"shifts",
				"members"
			]
		},
		"GroupPost": {
			"description": "Adding or updating a group. Will attempt to find group by id if provided or by targetName before creating a new group in the system.",
			"type": "object",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["GROUP"]
				},
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"],
					"default": "ACTIVE"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"supervisors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": [
				"recipientType",
				"targetName"
			]
		},
		"Info": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"version": {
					"type": "string"
				},
				"dependencies": {
					"type": "object"
				}
			},
			"required": [
				"name",
				"version"
			]
		},
		"Notification": {
			"type": "object",
			"description": "A notification",
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier for the notification"
				},
				"event": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"recipient": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"sender": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"incident": {
					"type": "string"
				},
				"domain": {
					"type": "string"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"status": {
					"type": "string"
				},
				"created": {
					"type": "string",
					"description": "Date and time the notification was created",
					"format": "date-time"
				}
			},
			"required": ["id", "event", "recipient", "sender", "created"]
		},
		"Notifications": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Notification"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"NotificationPost": {
			"type": "object",
			"description": "A notification",
			"properties": {
				"event": {
					"$ref": "#/definitions/ReferenceById"
				},
				"recipient": {
					"$ref": "#/definitions/ReferenceById"
				},
				"sender": {
					"$ref": "#/definitions/ReferenceById"
				},
				"incident": {
					"type": "string"
				},
				"domain": {
					"type": "string"
				},
				"priority": {
					"type": "string",
					"enum": ["LOW", "MEDIUM", "HIGH"]
				},
				"status": {
					"type": "string"
				}
			},
			"required": [
				"event",
				"recipient",
				"sender"
			]
		},
		"PaginationLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this page of the result set",
					"format": "uri"
				},
				"previous": {
					"type": "string",
					"description": "URL of the previous page of the result set",
					"format": "uri"
				},
				"next": {
					"type": "string",
					"description": "URL of the next page of the result set",
					"format": "uri"
				}
			},
			"required": [
				"self"
			]
		},
		"Person": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON"
					]
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"externallyOwned": {
					"description": "Externally owned = N means that data locking in the Web UI will never take place for a record, regardless of the data locking configuration. Externally owned = Y means that data locking in the Web UI will take place for a record, but only for the fields that have data locking enabled. These records can only be deleted via EPIC.",
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"locked": {
					"description": "When objects are in an externally owned state, locked controls which externally owned data fields users can change",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"webLogin": {
					"type": "string"
				},
				"phoneLogin": {
					"type": "string"
				},
				"site": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"targetName",
				"recipientType",
				"status",
				"externallyOwned",
				"links"
			]
		},
		"People": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Person"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"PersonPost": {
			"description": "Adding or updating a person. Will attempt to find person by id if provided or by targetName before creating a new person in the system.",
			"type": "object",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": ["PERSON"]
				},
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"],
					"default": "ACTIVE"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"webLogin": {
					"type": "string"
				},
				"phoneLogin": {
					"type": "string"
				},
				"roles": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"site": {
					"$ref": "#/definitions/ReferenceById"
				},
				"supervisors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReferenceById"
					}
				}
			},
			"required": [
				"recipientType",
				"targetName"
			]
		},
		"PhoneNumber": {
			"type": "object",
			"properties": {
				"e164": {
					"type": "string",
					"description": "E.164 international format phone number including country code"
				},
				"number": {
					"type": "string"
				},
				"areaCode": {
					"type": "string"
				},
				"countryCode": {
					"type": "string"
				},
				"ext": {
					"type": "string"
				}
			}
		},
		"Recipient": {
			"type": "object",
			"discriminator": "recipientType",
			"properties": {
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"externallyOwned": {
					"description": "Externally owned = N means that data locking in the Web UI will never take place for a record, regardless of the data locking configuration. Externally owned = Y means that data locking in the Web UI will take place for a record, but only for the fields that have data locking enabled. These records can only be deleted via EPIC.",
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"locked": {
					"description": "When objects are in an externally owned state, locked controls which externally owned data fields users can change",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"targetName",
				"recipientType",
				"status",
				"externallyOwned",
				"links"
			]
		},
		"Recipients": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Recipient"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"RecipientPost": {
			"type": "object",
			"discriminator": "recipientType",
			"properties": {
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				},
				"id": {
					"type": "string"
				},
				"targetName": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"],
					"default": "ACTIVE"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				}
			},
			"required": [
				"recipientType",
				"targetName"
			]
		},
		"RecipientReference": {
			"description": "Reference to an existing recipient",
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"description": "The recipient uuid or targetName"
				},
				"recipientType": {
					"type": "string",
					"enum": [
						"PERSON",
						"DEVICE",
						"GROUP"
					]
				}
			},
			"required": [
				"id",
				"recipientType"
			]
		},
		"ReferenceById": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				}
			},
			"required": [
				"id"
			]
		},
		"ReferenceByIdAndSelfLink": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"links"
			]
		},
		"ReferenceBySelfLink": {
			"type": "object",
			"properties": {
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"links"
			]
		},
		"Response": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				}
			},
			"required": ["id"]
		},
		"Responses": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Response"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Revision": {
			"type": "object",
			"description": "A domain entity revision",
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier for the revision"
				},
				"when": {
					"type": "string",
					"description": "The time of the revision",
					"format": "date-time"
				},
				"who": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"what": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"how": {
					"type": "object"
				}
			},
			"required": ["id", "when", "who"]
		},
		"Revisions": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Revision"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"SelfLink": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				}
			},
			"required": [
				"self"
			]
		},
		"Shift": {
			"type": "object",
			"description": "A shift. Edges: members",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"group": {
					"$ref": "#/definitions/ReferenceByIdAndSelfLink"
				},
				"members": {
					"$ref": "#/definitions/Recipients"
				},
				"links": {
					"$ref": "#/definitions/ShiftLinks"
				}
			},
			"required": [
				"id",
				"name",
				"status",
				"group",
				"links"
			]
		},
		"ShiftLinks": {
			"type": "object",
			"properties": {
				"self": {
					"type": "string",
					"description": "URL of this resource"
				},
				"members": {
					"type": "string",
					"description": "Members of this shift"
				}
			},
			"required": [
				"self",
				"members"
			]
		},
		"ShiftPost": {
			"type": "object",
			"description": "Adding or updating a shift. Will attempt to find shift by id if provided before creating a new shift in the system.",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"default": "ACTIVE",
					"enum": ["ACTIVE", "INACTIVE"]
				}
			},
			"required": [
				"name"
			]
		},
		"Shifts": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Shift"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"Site": {
			"type": "object",
			"description": "A geographic area",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"status": {
					"type": "string",
					"default": "ACTIVE",
					"enum": ["ACTIVE", "INACTIVE"]
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"address1": {
					"type": "string"
				},
				"address2": {
					"type": "string"
				},
				"city": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"externallyOwned": {
					"type": "boolean"
				},
				"externalKey": {
					"type": "string"
				},
				"links": {
					"$ref": "#/definitions/SelfLink"
				}
			},
			"required": [
				"id",
				"name",
				"status",
				"language",
				"timezone",
				"country",
				"externallyOwned",
				"links"
			]
		},
		"SystemEventType": {
			"description": "Observable system event type",
			"type": "string",
			"enum": [
				"call.busy",
				"call.connected",
				"call.dropped",
				"call.failed",
				"call.hung_up",
				"call.in",
				"call.no_answer",
				"call.reached_voicemail",
				"conference.joined",
				"conference.login_failed",
				"device.invalidated",
				"device.override_failed",
				"device.replaced",
				"email.failed",
				"email.opened",
				"event.annotated",
				"event.completed",
				"event.created",
				"event.resumed",
				"event.suspended",
				"event.terminated",
				"fax.status",
				"fax.submitted",
				"group.deleted",
				"incident.deleted",
				"notification.delayed",
				"notification.delivered",
				"notification.discarded",
				"notification.escalated",
				"notification.failed",
				"notification.recipient_not_found",
				"notification.recipient_replaced",
				"notification.sent",
				"public_address.failed",
				"response.mapped",
				"response.received",
				"response.rejected",
				"sms.delivered",
				"sms.read"
			]
		},
		"User": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"username": {
					"type": "string"
				}
			}
		},
		"Users": {
			"type": "object",
			"description": "A paginated result set",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/User"
					}
				},
				"count": {
					"type": "integer",
					"description": "Number of data items in this page of the result set"
				},
				"total": {
					"type": "integer",
					"description": "Total number of data items in the result set"
				},
				"links": {
					"$ref": "#/definitions/PaginationLinks"
				}
			},
			"required": [
				"data",
				"count",
				"total",
				"links"
			]
		},
		"BadRequestResponse": {
			"description": "Bad Request API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [400]
				},
				"reason": {
					"type": "string",
					"enum": ["Bad Request"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"UnauthorizedResponse": {
			"description": "Unauthorized API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [401]
				},
				"reason": {
					"type": "string",
					"enum": ["Unauthorized"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"ForbiddenResponse": {
			"description": "Forbidden API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [403]
				},
				"reason": {
					"type": "string",
					"enum": ["Forbidden"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"NotFoundResponse": {
			"description": "Not Found API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [404]
				},
				"reason": {
					"type": "string",
					"enum": ["Not Found"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"ConflictResponse": {
			"description": "Conflict API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [409]
				},
				"reason": {
					"type": "string",
					"enum": ["Conflict"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"TooManyRequestsResponse": {
			"description": "Too Many Requests API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [429]
				},
				"reason": {
					"type": "string",
					"enum": ["Too Many Requests"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		},
		"InternalServerErrorResponse": {
			"description": "Internal Server Error API response",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32",
					"enum": [500]
				},
				"reason": {
					"type": "string",
					"enum": ["Internal Server Error"]
				},
				"message": {
					"type": "string"
				}
			},
			"required": [
				"code",
				"reason",
				"message"
			]
		}
	},
	"parameters": {
		"eventId": {
			"name": "eventId",
			"in": "path",
			"description": "The event id",
			"required": true,
			"type": "string"
		},
		"groupId": {
			"name": "groupId",
			"in": "path",
			"description": "The group uuid or targetName",
			"required": true,
			"type": "string"
		},
		"personId": {
			"name": "personId",
			"in": "path",
			"description": "The person's uuid or targetName",
			"required": true,
			"type": "string"
		},
		"deviceId": {
			"name": "deviceId",
			"in": "path",
			"description": "The device uuid or targetName",
			"required": true,
			"type": "string"
		},
		"memberId": {
			"name": "memberId",
			"in": "path",
			"description": "The recipient's uuid or targetName",
			"required": true,
			"type": "string"
		},
		"shiftId": {
			"name": "shiftId",
			"in": "path",
			"description": "The uuid or name of the shift. e.g. 24/7 (Must be URL encoded)",
			"required": true,
			"type": "string"
		},
		"siteId": {
			"name": "siteId",
			"in": "path",
			"description": "The site uuid or name",
			"required": true,
			"type": "string"
		},
		"userId": {
			"name": "userId",
			"in": "path",
			"description": "The person's uuid or username",
			"required": true,
			"type": "string"
		},
		"embed": {
			"name": "embed",
			"in": "query",
			"description": "List of linked domain entities to embed in the response",
			"required": false,
			"type": "string"
		}
	},
	"responses": {
		"400": {
			"description": "Bad Request",
			"schema": {
				"$ref": "#/definitions/BadRequestResponse"
			}
		},
		"401": {
			"description": "Unauthorized",
			"schema": {
				"$ref": "#/definitions/UnauthorizedResponse"
			}
		},
		"403": {
			"description": "Forbidden",
			"schema": {
				"$ref": "#/definitions/ForbiddenResponse"
			}
		},
		"409": {
			"description": "Conflict",
			"schema": {
				"$ref": "#/definitions/ConflictResponse"
			}
		},
		"429": {
			"description": "Too Many Requests",
			"schema": {
				"$ref": "#/definitions/TooManyRequestsResponse"
			}
		},
		"500": {
			"description": "Internal Error",
			"schema": {
				"$ref": "#/definitions/InternalServerErrorResponse"
			}
		}
	}
}